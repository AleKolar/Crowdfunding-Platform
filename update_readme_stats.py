# update_readme_stats.py
import subprocess
import re
import sys


def run_tests_safely():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        result = subprocess.run(
            ['pytest', 'tests/', '-v', '--tb=short'],
            capture_output=True,
            text=True  # text=True –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤ UTF-8
        )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º stdout –∏ stderr
        stdout = result.stdout if result.stdout else ""
        stderr = result.stderr if result.stderr else ""
        output = stdout + stderr

        return output, result.returncode

    except UnicodeDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        # –ü—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        try:
            result = subprocess.run(
                ['pytest', 'tests/', '-v', '--tb=short'],
                capture_output=True
            )
            output = result.stdout.decode('cp1251', errors='ignore') + result.stderr.decode('cp1251', errors='ignore')
            return output, result.returncode
        except Exception as e2:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e2}", 1


def parse_test_results(output):
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤...")

    # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤—ã–≤–æ–¥–µ
    passed_match = re.search(r'(\d+) passed', output)
    failed_match = re.search(r'(\d+) failed', output)
    skipped_match = re.search(r'(\d+) skipped', output)
    error_match = re.search(r'(\d+) error', output)

    stats = {
        'passed': int(passed_match.group(1)) if passed_match else 0,
        'failed': int(failed_match.group(1)) if failed_match else 0,
        'skipped': int(skipped_match.group(1)) if skipped_match else 0,
        'errors': int(error_match.group(1)) if error_match else 0,
    }

    stats['total'] = stats['passed'] + stats['failed'] + stats['skipped'] + stats['errors']
    return stats


def update_readme(stats):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç README.md —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        content = re.sub(
            r'\*\*Total Tests\*\* \| .* \|',
            f'**Total Tests** | {stats["total"]} |',
            content
        )

        content = re.sub(
            r'\*\*Tests Passed\*\* \| .* \|',
            f'**Tests Passed** | {stats["passed"]} ‚úÖ |',
            content
        )

        content = re.sub(
            r'\*\*Tests Skipped\*\* \| .* \|',
            f'**Tests Skipped** | {stats["skipped"]} ‚è≠Ô∏è |',
            content
        )

        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(content)

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        output, returncode = run_tests_safely()

        # –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        stats = parse_test_results(output)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {stats['failed']}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        print(f"   üí• –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {returncode}")

        # –û–±–Ω–æ–≤–ª—è–µ–º README
        if update_readme(stats):
            print("‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å README.md")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

# –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# pytest tests/ --tb=short -q

# –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º
# pytest tests/ --cov=src --cov-report=term-missing

# –° HTML –æ—Ç—á–µ—Ç–æ–º
# pytest tests/ --html=report.html --self-contained-html