# run_dev.py
import uvicorn
import subprocess
import sys
import signal
import os
import socket
import time
import asyncio
from src.database.postgres import create_tables, engine
from src.database.redis_client import redis_manager


def check_redis_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis –Ω–∞ localhost:6379"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 6379))
        sock.close()
        return result == 0
    except:
        return False


def start_redis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Redis –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    print("üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")

    if check_redis_running():
        print("‚úÖ Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return None

    print("üöÄ –ó–∞–ø—É—Å–∫ Redis –≤ Docker...")
    try:
        redis_container = subprocess.Popen([
            "docker", "run", "-d", "--name", "redis-crowdfunding",
            "-p", "6379:6379", "redis:7-alpine"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Redis
        time.sleep(3)

        if check_redis_running():
            print("‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ Docker")
            return redis_container
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        return None


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    print("üêò –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")
        await create_tables()  # ‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ !!!
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (development mode)")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
        await redis_manager.init_redis()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False


def main():
    print("üöÄ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    print("=" * 50)
    print("üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ: http://localhost:8000")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("üîß –†–µ–∂–∏–º: development (–∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)")
    print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
    print("=" * 50)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    os.environ["ENVIRONMENT"] = "development"

    # –ó–∞–ø—É—Å–∫–∞–µ–º Redis
    redis_container = start_redis()
    if not redis_container and not check_redis_running():
        print("‚ùå Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: docker run -d --name redis-crowdfunding -p 6379:6379 redis:7-alpine")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery Worker
    print("üü¢ –ó–∞–ø—É—Å–∫ Celery Worker...")
    celery_worker = subprocess.Popen([
        sys.executable, "-m", "celery",
        "-A", "src.tasks.celery_app",
        "worker",
        "--loglevel=info",
        "--pool=solo"
    ])

    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery Beat
    print("‚è∞ –ó–∞–ø—É—Å–∫ Celery Beat...")
    celery_beat = subprocess.Popen([
        sys.executable, "-m", "celery",
        "-A", "src.tasks.celery_app",
        "beat",
        "--loglevel=info"
    ])

    def cleanup():
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å–∫–∞–ª–∏
        if redis_container:
            print("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
            subprocess.run(["docker", "stop", "redis-crowdfunding"], capture_output=True)
            subprocess.run(["docker", "rm", "redis-crowdfunding"], capture_output=True)

        celery_worker.terminate()
        celery_beat.terminate()
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(sig, frame):
        print(f"\nüìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        cleanup()
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        print("\nüéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        init_success = asyncio.run(init_database())

        if not init_success:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            cleanup()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
        print("\nüéØ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
        uvicorn.run(
            "main:app",
            host="127.0.0.1",
            port=8000,
            reload=True,
            reload_dirs=["src"],
            log_level="info",
            access_log=True
        )
    except KeyboardInterrupt:
        print("\n\nüõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        cleanup()


if __name__ == "__main__":
    main()

# python run_dev.py