# src/services/email_service.py
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from src.config.settings import settings
import logging
from typing import Optional
import re
import asyncio

logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Å–µ—Ä–≤–µ—Ä–∞
        self.smtp_server = settings.SMTP_SERVER
        self.smtp_port = settings.SMTP_PORT
        self.smtp_username = settings.SMTP_USERNAME
        self.smtp_password = settings.SMTP_PASSWORD
        self.smtp_from_email = settings.SMTP_FROM_EMAIL
        self.use_ssl = settings.SMTP_USE_SSL
        self.use_tls = settings.SMTP_USE_TLS

    def _create_smtp_connection(self) -> smtplib.SMTP:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        try:
            context = ssl.create_default_context()
            context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1
            context.minimum_version = ssl.TLSVersion.TLSv1_2

            if self.use_ssl:
                server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port, context=context)
            else:
                server = smtplib.SMTP(self.smtp_server, self.smtp_port)
                if self.use_tls:
                    server.starttls(context=context)

            return server

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise

    async def send_email(self,
                         to_email: str,
                         subject: str,
                         html_content: str,
                         text_content: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ!
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.smtp_from_email
            message["To"] = to_email

            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            if not text_content:
                # –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                text_content = re.sub('<[^<]+?>', '', html_content)  # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
                text_content = re.sub('\n\s*\n', '\n', text_content)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ HTML)
            part1 = MIMEText(text_content, "plain")
            part2 = MIMEText(html_content, "html")

            message.attach(part1)
            message.attach(part2)

            # –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ!
            with self._create_smtp_connection() as server:
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(message)

            logger.info(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}: {subject}")
            return True

        except smtplib.SMTPAuthenticationError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}")
            return False
        except smtplib.SMTPException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
            return False

    async def send_welcome_email(self, to_email: str, username: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        """
        from src.services.template_service import template_service

        subject = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrowdPlatform!"
        html_content = template_service.render_email_template(
            "welcome.html",
            username=username,
            platform_url=settings.PLATFORM_URL
        )

        return await self.send_email(to_email, subject, html_content)

    async def send_password_reset_email(self, to_email: str, reset_token: str, username: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        """
        from src.services.template_service import template_service

        subject = "üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è CrowdPlatform"
        reset_url = f"{settings.PLATFORM_URL}/reset-password?token={reset_token}"

        html_content = template_service.render_email_template(
            "password_reset.html",
            username=username,
            reset_url=reset_url,
            reset_token=reset_token
        )

        return await self.send_email(to_email, subject, html_content)

    async def send_verification_code_email(self, to_email: str, username: str, verification_code: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ email
        """
        from src.services.template_service import template_service

        subject = "üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è CrowdPlatform"
        html_content = template_service.render_email_template(
            "verification_code.html",
            username=username,
            verification_code=verification_code,
            platform_url=settings.PLATFORM_URL
        )

        return await self.send_email(to_email, subject, html_content)

    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
        """
        try:
            with self._create_smtp_connection() as server:
                server.login(self.smtp_username, self.smtp_password)
                logger.info("‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False


email_service = EmailService()