# src/services/webinar_service.py
import logging
from datetime import datetime, timedelta
from typing import Dict, Any

from livekit.api import AccessToken
from livekit.api.access_token import VideoGrants
from sqlalchemy.ext.asyncio import AsyncSession

from src.config.settings import settings
from src.database import models
from src.services.template_service import template_service
from src.repository.webinar_repository import webinar_repository
from src.repository.user_repository import user_repository

logger = logging.getLogger(__name__)


class WebinarService:
    def __init__(self):
        self.api_key = settings.LIVEKIT_API_KEY
        self.api_secret = settings.LIVEKIT_API_SECRET

    def create_webinar_room(self, webinar_id: int, title: str) -> tuple[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–∞"""
        room_name = f"webinar_{webinar_id}"

        grants = VideoGrants()
        grants.room_create = True
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = True
        grants.can_subscribe = True
        grants.can_publish_data = True
        grants.room_admin = True
        grants.hidden = False
        grants.recorder = False

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"creator_{webinar_id}")
            .with_name(f"Creator - {title}")
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        creator_token = token.to_jwt()
        return room_name, creator_token

    def generate_participant_token(self, webinar_id: int, user_id: int, username: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        room_name = f"webinar_{webinar_id}"
        participant_name = username or f"User {user_id}"

        grants = VideoGrants()
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = False
        grants.can_subscribe = True
        grants.can_publish_data = True
        grants.room_admin = False
        grants.hidden = False
        grants.recorder = False

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"user_{user_id}")
            .with_name(participant_name)
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        return token.to_jwt()

    async def register_for_webinar(self, db: AsyncSession, webinar_id: int, user_id: int) -> Dict[str, Any]:
        """–°–£–ü–ï–†-–ü–†–û–°–¢–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä - –û–î–ò–ù –ö–õ–ò–ö"""
        try:
            webinar = await webinar_repository.get_webinar_by_id(db, webinar_id)

            if not webinar:
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            if webinar.scheduled_at < datetime.now():
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"}

            if webinar.available_slots <= 0:
                return {"success": False, "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã"}

            existing_registration = await webinar_repository.get_user_registration(db, webinar_id, user_id)

            if existing_registration:
                return {
                    "success": True,
                    "message": "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                    "already_registered": True
                }

            registration = await webinar_repository.create_registration(db, webinar_id, user_id)

            user = await user_repository.get_user_by_id(db, user_id)

            if user:
                await self._send_registration_confirmation(db, user, webinar, registration)

                # ‚úÖ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                from src.tasks.tasks import create_platform_notification
                create_platform_notification.delay(
                    user_id=user_id,
                    title="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                    message=f'–í–µ–±–∏–Ω–∞—Ä "{webinar.title}" - {webinar.scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")}',
                    notification_type="webinar_registration"
                )

            return {
                "success": True,
                "message": "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                "registration_id": registration.id,
                "webinar_title": webinar.title,
                "scheduled_at": webinar.scheduled_at,
                "already_registered": False
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error registering for webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"}

    async def _send_registration_confirmation(self, db: AsyncSession, user: models.User, webinar: models.Webinar,
                                              registration: models.WebinarRegistration):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            from src.services.notification_service import notification_service

            email_content = self._create_registration_email_content(
                username=user.username,
                webinar_title=webinar.title,
                scheduled_at=webinar.scheduled_at,
                duration=webinar.duration,
                action_url=f"{settings.PLATFORM_URL}/webinars"
            )

            await notification_service.create_notification(
                db=db,
                user_id=user.id,
                title="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                message=email_content,
                notification_type="webinar_registration_confirmation",
                related_entity_type="webinar",
                related_entity_id=webinar.id,
                action_url=f"{settings.PLATFORM_URL}/webinars",
                meta_data={
                    "webinar_title": webinar.title,
                    "scheduled_at": webinar.scheduled_at.isoformat(),
                    "registration_id": registration.id,
                    "duration": webinar.duration,
                    "room_name": f"webinar_{webinar.id}"
                }
            )

            logger.info(f"Registration confirmation notification created for user {user.id}")

        except Exception as e:
            logger.error(f"Error sending registration confirmation: {e}")

    def _create_registration_email_content(self, username: str, webinar_title: str, scheduled_at: datetime,
                                           duration: int, action_url: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω"""
        try:
            return template_service.render_email_template(
                "webinar_registration.html",
                username=username,
                webinar_title=webinar_title,
                scheduled_at=scheduled_at.strftime('%d.%m.%Y –≤ %H:%M'),
                duration=duration,
                action_url=action_url
            )
        except Exception as e:
            logger.error(f"Error rendering email template: {e}")
            return f"""
            <div style="font-family: Arial, sans-serif; padding: 20px;">
                <h2>–ü—Ä–∏–≤–µ—Ç, {username}!</h2>
                <p>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:</p>
                <h3>"{webinar_title}"</h3>
                <p><strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</strong> {scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')}</p>
                <p>–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º –≤–µ–±–∏–Ω–∞—Ä–µ! üöÄ</p>
            </div>
            """

    async def join_webinar(self, db: AsyncSession, webinar_id: int, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤–µ–±–∏–Ω–∞—Ä—É"""
        try:
            registration = await webinar_repository.get_user_registration(db, webinar_id, user_id)

            if not registration:
                return {"success": False, "message": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä"}

            webinar = registration.webinar

            user = await user_repository.get_user_by_id(db, user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–µ–±–∏–Ω–∞—Ä–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
            time_diff = (webinar.scheduled_at - datetime.now()).total_seconds()
            if time_diff > 900:  # 15 –º–∏–Ω—É—Ç
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è"}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            participant_token = self.generate_participant_token(webinar_id, user_id, user.username if user else None)

            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –î–õ–Ø –û–¢–ú–ï–¢–ö–ò –ü–†–ò–°–£–¢–°–¢–í–ò–Ø
            await webinar_repository.mark_attended(db, webinar_id, user_id)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            await self._create_join_notification(db, user_id, webinar)

            return {
                "success": True,
                "participant_token": participant_token,
                "room_name": f"webinar_{webinar_id}",
                "webinar_title": webinar.title
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error joining webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É"}

    async def _create_join_notification(self, db: AsyncSession, user_id: int, webinar: models.Webinar):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≤–µ–±–∏–Ω–∞—Ä—É"""
        try:
            from src.services.notification_service import notification_service

            await notification_service.create_notification(
                db=db,
                user_id=user_id,
                title="üéØ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É",
                message=f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É "{webinar.title}"',
                notification_type="webinar_joined",
                related_entity_type="webinar",
                related_entity_id=webinar.id,
                meta_data={
                    "webinar_title": webinar.title,
                    "joined_at": datetime.now().isoformat()
                }
            )

        except Exception as e:
            logger.error(f"Error creating join notification: {e}")


webinar_service = WebinarService()