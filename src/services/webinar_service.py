# src/services/webinar_service.py
from src.services.notification_service import notification_service
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from fastapi import HTTPException, status
from sqlalchemy import select
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession

from src.config.settings import settings
from src.database import models
from src.services.notification_service import notification_service
from src.services.template_service import template_service
from src.repository.webinar_repository import webinar_repository
from src.repository.user_repository import user_repository

logger = logging.getLogger(__name__)

try:
    from livekit.api import AccessToken
    from livekit.api.access_token import VideoGrants

    LIVEKIT_AVAILABLE = True
    logger.info("‚úÖ LiveKit successfully imported")
except ImportError:
    logger.warning("LiveKit not available, using mock implementation")
    from src.services.mocks.livekit_mock import AccessToken, VideoGrants

    LIVEKIT_AVAILABLE = False


class WebinarService:
    def __init__(self):
        if LIVEKIT_AVAILABLE:
            self.api_key = settings.LIVEKIT_API_KEY
            self.api_secret = settings.LIVEKIT_API_SECRET
            logger.info("LiveKit configured with API key")
        else:
            self.api_key = "mock_api_key"
            self.api_secret = "mock_api_secret"
            logger.info("Using mock LiveKit implementation")

    def _create_livekit_room(self, webinar_id: int, title: str) -> tuple[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã LiveKit –∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è"""
        room_name = f"webinar_{webinar_id}"

        grants = VideoGrants()
        grants.room_create = True
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = True  # –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        grants.can_subscribe = True
        grants.can_publish_data = True
        grants.room_admin = True  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
        grants.hidden = False

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        try:
            grants.recorder = True  # –ú–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–µ–±–∏–Ω–∞—Ä
        except AttributeError:
            logger.debug("recorder attribute not available")

        logger.info(f"üéØ Creating LiveKit room: {room_name} for webinar {webinar_id}")

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"creator_{webinar_id}")
            .with_name(f"Creator - {title}")
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        creator_token = token.to_jwt()
        logger.info(f"‚úÖ LiveKit room '{room_name}' created successfully")
        return room_name, creator_token

    def generate_participant_token(self, webinar_id: int, user_id: int, username: str = None,
                                   can_publish: bool = True) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞

        Args:
            webinar_id: ID –≤–µ–±–∏–Ω–∞—Ä–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            can_publish: –ú–æ–∂–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –î–ê)
        """
        room_name = f"webinar_{webinar_id}"
        participant_name = username or f"User {user_id}"

        grants = VideoGrants()
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = can_publish  # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ú–û–ì–£–¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        grants.can_subscribe = True
        grants.can_publish_data = True  # –ú–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        grants.room_admin = False  # –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        grants.hidden = False

        logger.debug(
            f"üé´ Generating participant token for user {user_id} in room '{room_name}' (can_publish={can_publish})")

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"user_{user_id}")
            .with_name(participant_name)
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        return token.to_jwt()

    def generate_creator_token(self, webinar_id: int, creator_id: int, title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤–µ–±–∏–Ω–∞—Ä–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        room_name = f"webinar_{webinar_id}"

        grants = VideoGrants()
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = True  # –ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        grants.can_subscribe = True
        grants.can_publish_data = True
        grants.room_admin = True  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        grants.hidden = False

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        try:
            grants.room_create = True  # –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã
            grants.recorder = True  # –ú–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
        except AttributeError:
            logger.debug("Some admin attributes not available")

        logger.info(f"üëë Generating creator token for user {creator_id} in room '{room_name}'")

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"creator_{creator_id}")
            .with_name(f"Creator - {title}")
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        return token.to_jwt()

    async def create_webinar(
            self,
            db: AsyncSession,
            creator_id: int,
            title: str,
            description: str,
            scheduled_at: datetime,
            duration: int = 60,
            max_participants: int = 100,
            is_public: bool = True,
            meta_data: Optional[Dict[str, Any]] = None
    ) -> models.Webinar:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã LiveKit"""
        try:
            # 1. –°–û–ó–î–ê–ï–ú –ö–û–ú–ù–ê–¢–£ LIVEKIT –ü–ï–†–í–û–ô
            logger.info(f"üöÄ Starting webinar creation: '{title}' by user {creator_id}")

            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –≤–µ–±–∏–Ω–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            webinar = models.Webinar(
                title=title,
                description=description,
                scheduled_at=scheduled_at,
                duration=duration,
                max_participants=max_participants,
                creator_id=creator_id,
                is_public=is_public,
                meta_data=meta_data or {}
            )

            db.add(webinar)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            logger.info(f"üìù Webinar record created with ID: {webinar.id}")

            # 2. –°–û–ó–î–ê–ï–ú –ö–û–ú–ù–ê–¢–£ LIVEKIT
            try:
                room_name, creator_token = self._create_livekit_room(webinar.id, title)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –≤ meta_data
                webinar.meta_data = {
                    **(webinar.meta_data or {}),
                    'livekit_room': room_name,
                    'creator_token': creator_token,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—è
                    'room_created_at': datetime.now().isoformat(),
                    'livekit_available': True
                }

                logger.info(f"‚úÖ LiveKit room '{room_name}' created for webinar {webinar.id}")

            except Exception as e:
                logger.error(f"‚ùå Failed to create LiveKit room for webinar {webinar.id}: {e}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                webinar.meta_data = {
                    **(webinar.meta_data or {}),
                    'livekit_error': str(e),
                    'livekit_available': False,
                    'room_created_at': datetime.now().isoformat()
                }
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ LiveKit

            # 3. –§–ò–ù–ê–õ–ò–ó–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –í–ï–ë–ò–ù–ê–†–ê
            await db.commit()
            await db.refresh(webinar)

            # 4. –°–û–ó–î–ê–ï–ú –ê–ù–û–ù–° –í REDIS
            announcement_data = {
                'id': webinar.id,
                'title': webinar.title,
                'description': webinar.description,
                'scheduled_at': webinar.scheduled_at.isoformat(),
                'duration': webinar.duration,
                'max_participants': webinar.max_participants,
                'creator_id': webinar.creator_id,
                'livekit_room': webinar.meta_data.get('livekit_room', ''),
                'livekit_available': webinar.meta_data.get('livekit_available', False)
            }

            notification_service.create_webinar_announcement(announcement_data)

            logger.info(f"üéâ Webinar fully created: {webinar.id} by user {creator_id}")
            logger.info(f"   - Room: {webinar.meta_data.get('livekit_room', 'NOT_CREATED')}")
            logger.info(f"   - LiveKit available: {webinar.meta_data.get('livekit_available', False)}")

            return webinar

        except Exception as e:
            await db.rollback()
            logger.error(f"üí• Error creating webinar: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Failed to create webinar: {str(e)}"
            )

    async def update_webinar(
            self,
            db: AsyncSession,
            webinar_id: int,
            updater_id: int,
            update_data: Dict[str, Any]
    ) -> Optional[models.Webinar]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
        try:
            logger.info(f"üîÑ Updating webinar {webinar_id} by user {updater_id}")

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–±–∏–Ω–∞—Ä
            result = await db.execute(
                select(models.Webinar).where(models.Webinar.id == webinar_id)
            )
            webinar = result.scalar_one_or_none()

            if not webinar:
                logger.warning(f"Webinar {webinar_id} not found for update")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
            result = await db.execute(
                select(models.User).where(models.User.id == updater_id)
            )
            user = result.scalar_one_or_none()

            can_edit = (
                    webinar.creator_id == updater_id or
                    "admin" in getattr(user, 'roles', [])
            )

            if not can_edit:
                logger.warning(f"User {updater_id} doesn't have permission to edit webinar {webinar_id}")
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="Not enough permissions to edit this webinar"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for field, value in update_data.items():
                if hasattr(webinar, field):
                    setattr(webinar, field, value)
                    logger.debug(f"Updated field {field} for webinar {webinar_id}")

            webinar.updated_at = datetime.now()
            await db.commit()
            await db.refresh(webinar)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–æ–Ω—Å –≤ Redis
            announcement_data = {
                'id': webinar.id,
                'title': webinar.title,
                'description': webinar.description,
                'scheduled_at': webinar.scheduled_at.isoformat(),
                'duration': webinar.duration,
                'max_participants': webinar.max_participants,
                'creator_id': webinar.creator_id,
                'livekit_room': webinar.meta_data.get('livekit_room', ''),
                'livekit_available': webinar.meta_data.get('livekit_available', False)
            }

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–Ω–æ–Ω—Å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            notification_service.redis_client.delete(f"webinar_announcement_{webinar.id}")
            notification_service.redis_client.srem('active_webinar_announcements', f"webinar_announcement_{webinar.id}")

            notification_service.create_webinar_announcement(announcement_data)

            logger.info(f"‚úÖ Webinar {webinar_id} updated successfully")
            return webinar

        except Exception as e:
            await db.rollback()
            logger.error(f"Error updating webinar {webinar_id}: {e}")
            raise

    async def send_webinar_invitations(
            self,
            db: AsyncSession,
            webinar_id: int,
            user_ids: List[int]
    ) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–±–∏–Ω–∞—Ä
            result = await db.execute(
                select(models.Webinar).where(models.Webinar.id == webinar_id)
            )
            webinar = result.scalar_one_or_none()

            if not webinar:
                return 0

            sent_count = 0
            for user_id in user_ids:
                try:
                    await notification_service.create_notification(
                        db=db,
                        user_id=user_id,
                        title=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä: {webinar.title}",
                        message=f"–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä: {webinar.description}",
                        notification_type="webinar_invite",
                        related_entity_type="webinar",
                        related_entity_id=webinar.id,
                        action_url=f"/webinars/{webinar.id}",
                        meta_data={
                            "webinar_id": webinar.id,
                            "scheduled_at": webinar.scheduled_at.isoformat(),
                            "duration": webinar.duration
                        }
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"Error sending invitation to user {user_id}: {e}")
                    continue

            logger.info(f"Sent {sent_count} webinar invitations for webinar {webinar_id}")
            return sent_count

        except Exception as e:
            logger.error(f"Error sending webinar invitations: {e}")
            raise

    async def register_for_webinar(self, db: AsyncSession, webinar_id: int, user_id: int) -> Dict[str, Any]:
        """–ü–†–û–°–¢–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –≤ –û–î–ò–ù –ö–õ–ò–ö"""
        try:
            webinar = await webinar_repository.get_webinar_by_id(db, webinar_id)

            if not webinar:
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            if webinar.scheduled_at < datetime.now():
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"}

            # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            registrations_count = await webinar_repository.get_webinar_registrations_count(db, webinar_id)
            if registrations_count >= webinar.max_participants:
                return {"success": False, "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã"}

            existing_registration = await webinar_repository.get_user_registration(db, webinar_id, user_id)

            if existing_registration:
                return {
                    "success": True,
                    "message": "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                    "already_registered": True,
                    "webinar_id": webinar_id,
                    "webinar_title": webinar.title
                }

            registration = await webinar_repository.create_registration(db, webinar_id, user_id)

            user = await user_repository.get_user_by_id(db, user_id)

            if user:
                await self._send_registration_confirmation(db, user, webinar, registration)

                # ‚úÖ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                from src.tasks.tasks import create_platform_notification
                create_platform_notification.delay(
                    user_id=user_id,
                    title="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                    message=f'–í–µ–±–∏–Ω–∞—Ä "{webinar.title}" - {webinar.scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")}',
                    notification_type="webinar_registration"
                )

            return {
                "success": True,
                "message": "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                "registration_id": registration.id,
                "webinar_id": webinar_id,
                "webinar_title": webinar.title,
                "scheduled_at": webinar.scheduled_at,
                "already_registered": False
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error registering for webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"}

    async def _send_registration_confirmation(self, db: AsyncSession, user: models.User, webinar: models.Webinar,
                                              registration: models.WebinarRegistration):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            from src.services.notification_service import notification_service

            email_content = self._create_registration_email_content(
                username=user.username,
                webinar_title=webinar.title,
                scheduled_at=webinar.scheduled_at,
                duration=webinar.duration,
                action_url=f"{settings.PLATFORM_URL}/webinars"
            )

            await notification_service.create_notification(
                db=db,
                user_id=user.id,
                title="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                message=email_content,
                notification_type="webinar_registration_confirmation",
                related_entity_type="webinar",
                related_entity_id=webinar.id,
                action_url=f"{settings.PLATFORM_URL}/webinars",
                meta_data={
                    "webinar_title": webinar.title,
                    "scheduled_at": webinar.scheduled_at.isoformat(),
                    "registration_id": registration.id,
                    "duration": webinar.duration
                }
            )

            logger.info(f"Registration confirmation notification created for user {user.id}")

        except Exception as e:
            logger.error(f"Error sending registration confirmation: {e}")

    def _create_registration_email_content(self, username: str, webinar_title: str, scheduled_at: datetime,
                                           duration: int, action_url: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω"""
        try:
            return template_service.render_email_template(
                "webinar_registration.html",
                username=username,
                webinar_title=webinar_title,
                scheduled_at=scheduled_at.strftime('%d.%m.%Y –≤ %H:%M'),
                duration=duration,
                action_url=action_url
            )
        except Exception as e:
            logger.error(f"Error rendering email template: {e}")
            return f"""
            <div style="font-family: Arial, sans-serif; padding: 20px;">
                <h2>–ü—Ä–∏–≤–µ—Ç, {username}!</h2>
                <p>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:</p>
                <h3>"{webinar_title}"</h3>
                <p><strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</strong> {scheduled_at.strftime('%d.%m.%Y –≤ %H:%M')}</p>
                <p>–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º –≤–µ–±–∏–Ω–∞—Ä–µ! üöÄ</p>
            </div>
            """

    async def join_webinar(self, db: AsyncSession, webinar_id: int, user_id: int, is_creator: bool = False) -> Dict[
        str, Any]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤–µ–±–∏–Ω–∞—Ä—É

        Args:
            is_creator: –ï—Å–ª–∏ True - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—è
        """
        try:
            registration = await webinar_repository.get_user_registration(db, webinar_id, user_id)

            if not registration and not is_creator:
                return {"success": False, "message": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä"}

            webinar = await webinar_repository.get_webinar_by_id(db, webinar_id)
            if not webinar:
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            user = await user_repository.get_user_by_id(db, user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–µ–±–∏–Ω–∞—Ä–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
            time_diff = (webinar.scheduled_at - datetime.now()).total_seconds()
            if time_diff > 900 and not is_creator:  # 15 –º–∏–Ω—É—Ç
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è"}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if is_creator:
                # –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                participant_token = self.generate_creator_token(webinar_id, user_id, webinar.title)
                role = "creator"
            else:
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ (–º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)
                participant_token = self.generate_participant_token(
                    webinar_id,
                    user_id,
                    user.username if user else None,
                    can_publish=True  # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ú–û–ì–£–¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                role = "participant"

            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
            if not is_creator:
                await webinar_repository.mark_attended(db, webinar_id, user_id)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            await self._create_join_notification(db, user_id, webinar, role)

            return {
                "success": True,
                "token": participant_token,
                "join_url": f"{settings.PLATFORM_URL}/webinars/{webinar_id}/room",
                "message": "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É!",
                "webinar_title": webinar.title,
                "role": role,
                "can_publish": True  # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error joining webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É"}

    async def _create_join_notification(self, db: AsyncSession, user_id: int, webinar: models.Webinar, role: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≤–µ–±–∏–Ω–∞—Ä—É"""
        try:
            from src.services.notification_service import notification_service

            role_text = "—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º" if role == "creator" else "—É—á–∞—Å—Ç–Ω–∏–∫–æ–º"

            await notification_service.create_notification(
                db=db,
                user_id=user_id,
                title="üéØ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É",
                message=f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É "{webinar.title}" –∫–∞–∫ {role_text}',
                notification_type="webinar_joined",
                related_entity_type="webinar",
                related_entity_id=webinar.id,
                meta_data={
                    "webinar_title": webinar.title,
                    "joined_at": datetime.now().isoformat(),
                    "role": role
                }
            )

        except Exception as e:
            logger.error(f"Error creating join notification: {e}")

    async def get_webinar_room_info(self, webinar_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ –≤–µ–±–∏–Ω–∞—Ä–∞"""
        try:
            return {
                "webinar_id": webinar_id,
                "room_name": f"webinar_{webinar_id}",
                "livekit_available": LIVEKIT_AVAILABLE
            }
        except Exception as e:
            logger.error(f"Error getting webinar room info: {e}")
            return {
                "webinar_id": webinar_id,
                "error": str(e)
            }


webinar_service = WebinarService()