# src/services/webinar_service.py
import logging
from datetime import datetime, timedelta
from typing import Dict, Any

from livekit.api import AccessToken
from livekit.api.access_token import VideoGrants
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.config.settings import settings
from src.database import models

logger = logging.getLogger(__name__)


class WebinarService:
    def __init__(self):
        self.api_key = settings.LIVEKIT_API_KEY
        self.api_secret = settings.LIVEKIT_API_SECRET

    def create_webinar_room(self, webinar_id: int, title: str) -> tuple[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–∞"""
        room_name = f"webinar_{webinar_id}"

        grants = VideoGrants()
        grants.room_create = True
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = True
        grants.can_subscribe = True
        grants.can_publish_data = True
        grants.room_admin = True
        grants.hidden = False
        grants.recorder = False

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"creator_{webinar_id}")
            .with_name(f"Creator - {title}")
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        creator_token = token.to_jwt()
        return room_name, creator_token

    def generate_participant_token(self, webinar_id: int, user_id: int, username: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        room_name = f"webinar_{webinar_id}"
        participant_name = username or f"User {user_id}"

        grants = VideoGrants()
        grants.room_join = True
        grants.room = room_name
        grants.can_publish = False
        grants.can_subscribe = True
        grants.can_publish_data = True  # –†–∞–∑—Ä–µ—à–∞–µ–º —á–∞—Ç
        grants.room_admin = False
        grants.hidden = False
        grants.recorder = False

        token = (
            AccessToken(api_key=self.api_key, api_secret=self.api_secret)
            .with_identity(f"user_{user_id}")
            .with_name(participant_name)
            .with_grants(grants)
            .with_ttl(timedelta(hours=3))
        )

        return token.to_jwt()

    async def register_for_webinar(self, db: AsyncSession, webinar_id: int, user_id: int) -> Dict[str, Any]:
        """–°–£–ü–ï–†-–ü–†–û–°–¢–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä - –û–î–ò–ù –ö–õ–ò–ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ–±–∏–Ω–∞—Ä–∞
            result = await db.execute(
                select(models.Webinar).where(
                    models.Webinar.id == webinar_id,
                    models.Webinar.status == "scheduled"
                )
            )
            webinar = result.scalar_one_or_none()

            if not webinar:
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–ª –ª–∏ —É–∂–µ –≤–µ–±–∏–Ω–∞—Ä
            if webinar.scheduled_at < datetime.now():
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
            if webinar.available_slots <= 0:
                return {"success": False, "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await db.execute(
                select(models.WebinarRegistration).where(
                    models.WebinarRegistration.webinar_id == webinar_id,
                    models.WebinarRegistration.user_id == user_id
                )
            )
            existing_registration = result.scalar_one_or_none()

            if existing_registration:
                return {
                    "success": True,
                    "message": "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                    "already_registered": True
                }

            # ‚úÖ –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!
            registration = models.WebinarRegistration(
                user_id=user_id,
                webinar_id=webinar_id
            )

            db.add(registration)
            await db.commit()
            await db.refresh(registration)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await db.execute(
                select(models.User).where(models.User.id == user_id)
            )
            user = result.scalar_one_or_none()

            if user:
                # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                from src.tasks.tasks import send_webinar_registration_confirmation
                send_webinar_registration_confirmation.delay(
                    user.email,
                    user.username,
                    webinar.title,
                    webinar.scheduled_at
                )

                # ‚úÖ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                from src.tasks.tasks import create_platform_notification
                create_platform_notification.delay(
                    user_id=user_id,
                    title="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                    message=f'–í–µ–±–∏–Ω–∞—Ä "{webinar.title}" - {webinar.scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")}',
                    notification_type="webinar_registration"
                )

            return {
                "success": True,
                "message": "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!",
                "registration_id": registration.id,
                "webinar_title": webinar.title,
                "scheduled_at": webinar.scheduled_at,
                "already_registered": False
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error registering for webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"}

    async def join_webinar(self, db: AsyncSession, webinar_id: int, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤–µ–±–∏–Ω–∞—Ä—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            result = await db.execute(
                select(models.WebinarRegistration).where(
                    models.WebinarRegistration.webinar_id == webinar_id,
                    models.WebinarRegistration.user_id == user_id
                )
            )
            registration = result.scalar_one_or_none()

            if not registration:
                return {"success": False, "message": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä"}

            webinar = registration.webinar
            user = registration.user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–µ–±–∏–Ω–∞—Ä–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
            time_diff = (webinar.scheduled_at - datetime.now()).total_seconds()
            if time_diff > 900:  # 15 –º–∏–Ω—É—Ç
                return {"success": False, "message": "–í–µ–±–∏–Ω–∞—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è"}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            participant_token = self.generate_participant_token(webinar_id, user_id, user.username)

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ
            registration.attended = True
            await db.commit()

            return {
                "success": True,
                "participant_token": participant_token,
                "room_name": f"webinar_{webinar_id}",
                "webinar_title": webinar.title
            }

        except Exception as e:
            await db.rollback()
            logger.error(f"Error joining webinar: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É"}


webinar_service = WebinarService()