# src/services/template_service.py
from jinja2 import Environment, FileSystemLoader, select_autoescape, TemplateNotFound
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class TemplateService:
    def __init__(self):
        # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        self.templates_dir = Path(__file__).parent.parent / "templates"

        logger.info(f"üìÅ Templates directory: {self.templates_dir}")

        # Jinja2 environment
        self.env = Environment(
            loader=FileSystemLoader(self.templates_dir),
            autoescape=select_autoescape(['html', 'xml']),
            trim_blocks=True,
            lstrip_blocks=True
        )

    def render_email_template(self, template_name: str, **context) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç email —à–∞–±–ª–æ–Ω"""
        try:
            logger.info(f"üé® Rendering email template: {template_name}")
            template_path = f"emails/{template_name}"
            template = self.env.get_template(template_path)
            result = template.render(**context)
            logger.info(f"‚úÖ Template rendered successfully: {template_name}")
            return result
        except TemplateNotFound as e:
            logger.error(f"‚ùå Template not found: {template_name} - {e}")
            # HTML: –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            return self._get_fallback_template(template_name, context)
        except Exception as e:
            logger.error(f"‚ùå Error rendering template {template_name}: {e}")
            return self._get_fallback_template(template_name, context)

    def _get_fallback_template(self, template_name: str, context: dict) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π —à–∞–±–ª–æ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        if "welcome_email" in template_name:
            return f"""
            <html>
            <body>
                <h1>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrowdPlatform!</h1>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {context.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!</p>
                <p>–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!</p>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ CrowdPlatform</p>
            </body>
            </html>
            """
        elif "verification_code" in template_name:
            return f"""
            <html>
            <body>
                <h1>üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {context.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!</p>
                <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <strong>{context.get('verification_code', '')}</strong></p>
                <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω {context.get('code_expire_minutes', 10)} –º–∏–Ω—É—Ç.</p>
                <p><strong>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</strong></p>
            </body>
            </html>
            """
        else:
            return f"<html><body><h1>Email –æ—Ç CrowdPlatform</h1><p>–î–∞–Ω–Ω—ã–µ: {context}</p></body></html>"


template_service = TemplateService()