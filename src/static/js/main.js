// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
const API_BASE = 'http://localhost:8000';

function logResult(message) {
    const results = document.getElementById('api-results');
    results.textContent += `\n${new Date().toLocaleTimeString()}: ${message}`;
    results.scrollTop = results.scrollHeight;
}

async function testAuth() {
    try {
        logResult('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');

        // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registerData = {
            email: `test_${Date.now()}@example.com`,
            phone: `+7999${Date.now().toString().slice(-7)}`,
            username: `user_${Date.now().toString().slice(-6)}`,
            password: "TestPass123!",
            secret_code: "1234"
        };

        const registerResponse = await fetch(`${API_BASE}/auth/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(registerData)
        });

        if (registerResponse.ok) {
            const registerResult = await registerResponse.json();
            logResult(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! User ID: ${registerResult.user_id}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            document.getElementById('user-id').textContent = registerResult.user_id;
            document.getElementById('user-email').textContent = registerData.email;
            document.getElementById('user-status').textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
            document.getElementById('user-status').className = 'badge bg-success';

        } else {
            const error = await registerResponse.json();
            logResult(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.detail}`);
        }
    } catch (error) {
        logResult(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

async function getProjects() {
    try {
        logResult('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');

        const response = await fetch(`${API_BASE}/projects/`);

        if (response.ok) {
            const projects = await response.json();
            logResult(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.pagination?.total || projects.length}`);
            logResult(JSON.stringify(projects, null, 2));
        } else {
            const error = await response.json();
            logResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.detail}`);
        }
    } catch (error) {
        logResult(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

async function getWebinars() {
    try {
        logResult('üé• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ–±–∏–Ω–∞—Ä–æ–≤...');

        const response = await fetch(`${API_BASE}/webinars/announcements`);

        if (response.ok) {
            const webinars = await response.json();
            logResult(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–Ω–æ–Ω—Å–æ–≤ –≤–µ–±–∏–Ω–∞—Ä–æ–≤: ${webinars.count}`);
            logResult(JSON.stringify(webinars, null, 2));
        } else {
            const error = await response.json();
            logResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤: ${error.detail}`);
        }
    } catch (error) {
        logResult(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    logResult('üöÄ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API.');
});