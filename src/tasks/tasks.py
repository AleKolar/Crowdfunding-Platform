# src/tasks/tasks.py
from celery import Celery
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import logging
import asyncio

from src.config.settings import settings
from src.database import models
from src.repository.webinar_repository import webinar_repository
from src.services.email_service import email_service
from src.services.template_service import template_service
from src.tasks.celery_app import celery_app

logger = logging.getLogger(__name__)

celery = Celery('crowdfunding')
celery.conf.broker_url = settings.CELERY_BROKER_URL
celery.conf.result_backend = settings.CELERY_RESULT_BACKEND

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
engine = create_engine(settings.DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


@celery_app.task
def send_welcome_email(user_email: str, username: str):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        subject = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrowdPlatform!"

        html_content = template_service.render_email_template(
            "welcome.html",
            username=username,
            platform_url=settings.PLATFORM_URL
        )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        async def send_email_async():
            return await email_service.send_email(user_email, subject, html_content)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            success = loop.run_until_complete(send_email_async())

            if success:
                logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ {user_email}")

        finally:
            loop.close()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞: {e}")


@celery_app.task
def send_verification_codes(user_email: str, username: str, phone: str, verification_code: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ SMS –∏ Email"""
    try:
        # ‚úÖ –û–¢–ü–†–ê–í–ö–ê EMAIL –° –ö–û–î–û–ú
        async def send_verification_email():
            return await email_service.send_verification_code_email(
                to_email=user_email,
                username=username,
                verification_code=verification_code
            )

        # ‚úÖ –û–¢–ü–†–ê–í–ö–ê SMS –° –ö–û–î–û–ú
        async def send_verification_sms():
            from src.services.sms_service import sms_service
            return await sms_service.send_verification_code(phone, verification_code)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            email_success = loop.run_until_complete(send_verification_email())
            sms_success = loop.run_until_complete(send_verification_sms())

            logger.info(f"üîê –ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {user_email}: SMS={sms_success}, Email={email_success}")

        finally:
            loop.close()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")


@celery_app.task
def send_webinar_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–µ–±–∏–Ω–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = SessionLocal()
    try:
        from src.services.notification_service import notification_service
        webinars = webinar_repository.get_upcoming_webinars_for_reminders(db)

        for webinar in webinars:
            registrations = webinar_repository.get_registrations_for_reminder(db, webinar.id)

            for registration in registrations:
                notification_service.create_notification(
                    db=db,
                    user_id=registration.user_id,
                    title="üîî –í–µ–±–∏–Ω–∞—Ä —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è",
                    message=f"–í–µ–±–∏–Ω–∞—Ä '{webinar.title}' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å",
                    notification_type="webinar_reminder",
                    related_entity_type="webinar",
                    related_entity_id=webinar.id,
                    action_url=f"{settings.PLATFORM_URL}/webinars/{webinar.id}/join",
                    meta_data={
                        "webinar_title": webinar.title,
                        "scheduled_at": webinar.scheduled_at.isoformat(),
                        "webinar_id": webinar.id
                    }
                )

                webinar_repository.mark_reminder_sent(db, registration.id)

            db.commit()

    except Exception as e:
        logger.error(f"Error sending webinar reminders: {e}")
        db.rollback()
    finally:
        db.close()


@celery_app.task
def send_webinar_reminder_email(user_email: str, username: str, webinar_title: str, scheduled_at: datetime,
                                webinar_id: int):
    """Email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ"""
    try:
        subject = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–µ–±–∏–Ω–∞—Ä '{webinar_title}'"

        html_content = template_service.render_email_template(
            "webinar_reminder.html",
            username=username,
            webinar_title=webinar_title,
            scheduled_at=scheduled_at.strftime("%d.%m.%Y –≤ %H:%M"),
            duration=60,
            webinar_url=f"{settings.PLATFORM_URL}/webinars/{webinar_id}/join"
        )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        async def send_email_async():
            return await email_service.send_email(user_email, subject, html_content)

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            success = loop.run_until_complete(send_email_async())
            if success:
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {user_email}")
        finally:
            loop.close()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–µ–±–∏–Ω–∞—Ä–µ: {e}")


@celery_app.task
def process_email_queue():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ email"""
    db = SessionLocal()
    try:
        # –ë–µ—Ä–µ–º emails —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–Ω–∞—á–∞–ª–∞
        pending_emails = db.scalars(
            select(models.EmailQueue).where(
                models.EmailQueue.status == "pending"
            ).order_by(
                models.EmailQueue.priority.asc(),
                models.EmailQueue.created_at.asc()
            ).limit(10)
        ).all()

        for email_job in pending_emails:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                async def send_email_async():
                    return await email_service.send_email(
                        email_job.email,
                        email_job.subject,
                        email_job.template_data.get("message", "")
                    )

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    success = loop.run_until_complete(send_email_async())

                    if success:
                        email_job.status = "sent"
                        email_job.sent_at = datetime.now()
                    else:
                        email_job.status = "failed"
                        email_job.error_message = "SMTP error"

                    db.commit()

                finally:
                    loop.close()

            except Exception as e:
                email_job.retry_count += 1
                if email_job.retry_count >= email_job.max_retries:
                    email_job.status = "failed"
                    email_job.error_message = str(e)
                else:
                    email_job.status = "retrying"

                db.commit()
                logger.error(f"Error processing email queue item {email_job.id}: {e}")

    except Exception as e:
        logger.error(f"Error processing email queue: {e}")
        db.rollback()
    finally:
        db.close()

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π