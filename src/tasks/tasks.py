# src/tasks/tasks.py
from sqlalchemy import create_engine, select, func, delete
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import logging
import asyncio

from src.config.settings import settings
from src.database import models
from src.services.email_service import email_service

from src.services.template_service import template_service
from src.tasks.celery_app import celery_app
from src.tasks.db_operations import sync_webinar_repository, sync_notification_service

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –¥–ª—è Celery (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
SYNC_DATABASE_URL = settings.DATABASE_URL.replace("asyncpg", "psycopg2")
engine = create_engine(SYNC_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def run_async(coro):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ Celery"""
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if loop.is_running():
        async def wrapper():
            return await coro

        return asyncio.create_task(wrapper())
    else:
        return loop.run_until_complete(coro)


# ========== EMAIL –ó–ê–î–ê–ß–ò ==========

@celery_app.task
def send_welcome_email(user_email: str, username: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Celery"""
    try:
        logger.info(f"üëã Sending welcome email to {user_email}")

        from src.services.email_service import email_service

        success = email_service.send_welcome_email(
            to_email=user_email,
            username=username
        )

        logger.info(f"‚úÖ Welcome email sent to {user_email}: {success}")
        return success

    except Exception as e:
        logger.error(f"‚ùå Error sending welcome email: {e}")
        return False


@celery_app.task
def send_verification_codes_task(user_email: str, username: str, verification_code: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Celery"""
    try:
        logger.info(f"üîê Sending verification code to {user_email}")

        from src.services.email_service import email_service

        success = email_service.send_verification_code_email(
            to_email=user_email,
            username=username,
            verification_code=verification_code
        )

        logger.info(f"‚úÖ Verification code sent to {user_email}: {success}")
        return success

    except Exception as e:
        logger.error(f"‚ùå Error sending verification code: {e}")
        return False


# ========== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ==========

@celery_app.task
def send_webinar_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–µ–±–∏–Ω–∞—Ä–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)"""
    db = SessionLocal()
    try:
        webinars = sync_webinar_repository.get_upcoming_webinars_for_reminders(db)
        reminder_count = 0

        for webinar in webinars:
            registrations = sync_webinar_repository.get_registrations_for_reminder(db, webinar.id)

            for registration in registrations:
                try:
                    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                    sync_notification_service.create_notification(
                        db=db,
                        user_id=registration.user_id,
                        title="üîî –í–µ–±–∏–Ω–∞—Ä —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è",
                        message=f"–í–µ–±–∏–Ω–∞—Ä '{webinar.title}' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å",
                        notification_type="webinar_reminder",
                        related_entity_type="webinar",
                        related_entity_id=webinar.id,
                        action_url=f"{settings.PLATFORM_URL}/webinars/{webinar.id}/join"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    send_webinar_reminder_email.delay(
                        user_email=registration.user.email,
                        username=registration.user.username,
                        webinar_title=webinar.title,
                        scheduled_at=webinar.scheduled_at,
                        webinar_id=webinar.id
                    )

                    sync_webinar_repository.mark_reminder_sent(db, registration.id)
                    reminder_count += 1

                except Exception as e:
                    logger.error(f"‚ùå Error processing registration {registration.id}: {e}")
                    continue

        logger.info(f"‚úÖ Webinar reminders sent: {reminder_count}")
        return reminder_count

    except Exception as e:
        logger.error(f"‚ùå Error sending webinar reminders: {e}")
        db.rollback()
        return 0
    finally:
        db.close()


@celery_app.task
def send_webinar_reminder_email(user_email: str, username: str, webinar_title: str, scheduled_at: datetime, webinar_id: int):
    """Email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ"""
    try:
        logger.info(f"üìÖ Sending webinar reminder to {user_email}")

        # ‚úÖ –°–ò–ù–•–†–û–ù–ù–´–ô –≤—ã–∑–æ–≤
        success = email_service.send_email(
            to_email=user_email,
            subject=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–µ–±–∏–Ω–∞—Ä '{webinar_title}'",
            html_content=template_service.render_email_template(
                "webinar_reminder.html",
                username=username,
                webinar_title=webinar_title,
                scheduled_at=scheduled_at.strftime("%d.%m.%Y –≤ %H:%M"),
                webinar_url=f"{settings.PLATFORM_URL}/webinars/{webinar_id}/join"
            )
        )

        if success:
            logger.info(f"‚úÖ Webinar reminder sent to {user_email}")
        else:
            logger.error(f"‚ùå Failed to send webinar reminder to {user_email}")

        return success

    except Exception as e:
        logger.error(f"‚ùå Error sending webinar reminder: {e}")
        return False


@celery_app.task
def process_email_queue():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ email"""
    db = SessionLocal()
    try:
        pending_emails = db.scalars(
            select(models.EmailQueue).where(
                models.EmailQueue.status == "pending"
            ).order_by(
                models.EmailQueue.priority.asc(),
                models.EmailQueue.created_at.asc()
            ).limit(10)
        ).all()

        processed_count = 0

        for email_job in pending_emails:
            try:
                # ‚úÖ –°–ò–ù–•–†–û–ù–ù–´–ô –≤—ã–∑–æ–≤
                success = email_service.send_email(
                    to_email=email_job.email,
                    subject=email_job.subject,
                    html_content=email_job.template_data.get("message", "")
                )

                if success:
                    email_job.status = "sent"
                    email_job.sent_at = datetime.now()
                    processed_count += 1
                    logger.info(f"‚úÖ Email sent to {email_job.email}")
                else:
                    email_job.status = "failed"
                    email_job.error_message = "SMTP error"
                    logger.error(f"‚ùå Failed to send email to {email_job.email}")

                db.commit()

            except Exception as e:
                logger.error(f"‚ùå Error processing email {email_job.id}: {e}")
                email_job.status = "failed"
                email_job.error_message = str(e)
                db.commit()

        logger.info(f"‚úÖ Email queue processed: {processed_count} emails")
        return processed_count

    except Exception as e:
        logger.error(f"‚ùå Error processing email queue: {e}")
        db.rollback()
        return 0
    finally:
        db.close()


@celery_app.task
def update_project_rankings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Ç–æ–ø–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    db = SessionLocal()
    try:
        logger.info("üèÜ Updating project rankings...")

        from sqlalchemy import case, desc

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–æ–≤
        project_rankings = db.execute(
            select(
                models.Project.id,
                func.sum(models.Donation.amount).label('total_raised')
            ).select_from(
                models.Project
            ).join(
                models.Donation,
                models.Donation.project_id == models.Project.id
            ).where(
                models.Donation.status == 'completed'
            ).group_by(
                models.Project.id
            ).order_by(
                desc('total_raised')
            )
        ).fetchall()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        for rank, (project_id, total_raised) in enumerate(project_rankings, 1):
            project = db.scalar(
                select(models.Project).where(models.Project.id == project_id)
            )
            if project:
                project.ranking_position = rank
                project.popularity_score = total_raised or 0

        db.commit()

        logger.info(f"‚úÖ Project rankings updated: {len(project_rankings)} projects ranked")
        return {"projects_ranked": len(project_rankings)}

    except Exception as e:
        logger.error(f"‚ùå Error updating project rankings: {e}")
        db.rollback()
        return False
    finally:
        db.close()

@celery_app.task
def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        thirty_days_ago = datetime.now() - timedelta(days=30)
        deleted_notifications = db.execute(
            delete(models.Notification).where(
                models.Notification.created_at < thirty_days_ago
            )
        ).rowcount

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        seven_days_ago = datetime.now() - timedelta(days=7)
        deleted_emails = db.execute(
            delete(models.EmailQueue).where(
                models.EmailQueue.sent_at < seven_days_ago
            )
        ).rowcount

        db.commit()
        logger.info(f"‚úÖ Cleanup completed: {deleted_notifications} notifications, {deleted_emails} emails")
        return {"notifications": deleted_notifications, "emails": deleted_emails}

    except Exception as e:
        logger.error(f"‚ùå Error cleaning up old data: {e}")
        db.rollback()
        return {"notifications": 0, "emails": 0}
    finally:
        db.close()


@celery_app.task
def update_project_statistics():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–Ω–∞—Ç–æ–≤"""
    db = SessionLocal()
    try:
        logger.info("üìä Updating project statistics from donations...")

        # 1. –°—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
        from sqlalchemy import func, desc

        project_stats = db.execute(
            select(
                models.Donation.project_id,
                func.count(models.Donation.id).label('donations_count'),
                func.sum(models.Donation.amount).label('total_raised'),
                func.avg(models.Donation.amount).label('avg_donation'),
                func.max(models.Donation.amount).label('max_donation')
            ).where(
                models.Donation.status == 'completed'
            ).group_by(
                models.Donation.project_id
            ).order_by(
                desc('total_raised')  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ –¥–æ–Ω–∞—Ç–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            )
        ).fetchall()

        updated_count = 0

        for stat in project_stats:
            project_id, donations_count, total_raised, avg_donation, max_donation = stat

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            project = db.scalar(
                select(models.Project).where(models.Project.id == project_id)
            )

            if project:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                project.total_raised = total_raised or 0
                project.donations_count = donations_count or 0
                project.avg_donation = avg_donation or 0
                project.max_donation = max_donation or 0

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å
                if project.goal_amount and project.goal_amount > 0:
                    project.completion_percentage = min(
                        round((total_raised / project.goal_amount) * 100, 2),
                        100.0
                    )

                updated_count += 1

        # 2. –¢–æ–ø –¥–æ–Ω–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        twenty_four_hours_ago = datetime.now() - timedelta(hours=24)
        recent_large_donations = db.scalars(
            select(models.Donation).where(
                models.Donation.status == 'completed',
                models.Donation.created_at >= twenty_four_hours_ago,
                models.Donation.amount >= 1000  # –ö—Ä—É–ø–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã (–æ—Ç 1000)
            ).order_by(
                desc(models.Donation.amount)
            ).limit(10)
        ).all()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã
        for donation in recent_large_donations:
            logger.info(f"üí∞ Large donation: {donation.amount} to project {donation.project_id}")

        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
        payment_methods_stats = db.execute(
            select(
                models.Donation.payment_method,
                func.count(models.Donation.id).label('count'),
                func.sum(models.Donation.amount).label('total')
            ).where(
                models.Donation.status == 'completed'
            ).group_by(
                models.Donation.payment_method
            )
        ).fetchall()

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
        for method_stat in payment_methods_stats:
            method, count, total = method_stat
            logger.info(f"üí≥ Payment method {method}: {count} donations, total {total}")

        db.commit()

        logger.info(f"‚úÖ Project statistics updated: {updated_count} projects, "
                    f"{len(recent_large_donations)} large donations in 24h, "
                    f"{len(payment_methods_stats)} payment methods")

        return {
            "projects_updated": updated_count,
            "large_donations_24h": len(recent_large_donations),
            "payment_methods": len(payment_methods_stats)
        }

    except Exception as e:
        logger.error(f"‚ùå Error updating project statistics: {e}")
        db.rollback()
        return False
    finally:
        db.close()


# ========== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø Websocket ==========

@celery_app.task
def create_platform_notification(user_id: int, title: str, message: str, notification_type: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ + WebSocket –ø—É—à"""
    db = SessionLocal()
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        notification = models.Notification(
            user_id=user_id,
            title=title,
            message=message,
            notification_type=notification_type,
            is_read=False
        )
        db.add(notification)
        db.commit()
        db.refresh(notification)

        logger.info(f"‚úÖ Platform notification created for user {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—à
        push_data = {
            "type": "notification",
            "notification_id": notification.id,
            "title": title,
            "message": message,
            "notification_type": notification_type,
            "created_at": notification.created_at.isoformat(),
            "is_read": False
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Redis pub/sub
        import redis
        import json

        r = redis.Redis(host=settings.REDIS_HOST, port=settings.REDIS_PORT, db=settings.REDIS_DB)
        r.publish(f'user_{user_id}', json.dumps(push_data))

        logger.info(f"üì¢ WebSocket push sent to user {user_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error creating platform notification: {e}")
        db.rollback()
        return False
    finally:
        db.close()


