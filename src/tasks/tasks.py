# src/tasks/tasks.py
from celery import Celery
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from datetime import datetime

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from src.config.settings import settings
from src.database import models

celery = Celery('crowdfunding')
celery.conf.broker_url = settings.CELERY_BROKER_URL
celery.conf.result_backend = settings.CELERY_RESULT_BACKEND

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
engine = create_engine(settings.DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


@celery.task
def send_welcome_email(user_email: str, username: str):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º (SendGrid, Mailgun, etc.)
        message = MIMEMultipart("alternative")
        message["Subject"] = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrowdPlatform!"
        message["From"] = settings.SMTP_FROM_EMAIL
        message["To"] = user_email

        html = f"""
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!</h1>
        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–π –∫—Ä–∞—É–¥—Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.</p>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
        <ul>
            <li>–°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</li>
            <li>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–µ–±–∏–Ω–∞—Ä–∞—Ö</li>
            <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏</li>
        </ul>
        """

        message.attach(MIMEText(html, "html"))

        # –í development –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"üìß Welcome email to {user_email}: {html}")

        # –í production:
        # with smtplib.SMTP(settings.SMTP_SERVER, settings.SMTP_PORT) as server:
        #     server.login(settings.SMTP_USERNAME, settings.SMTP_PASSWORD)
        #     server.send_message(message)

    except Exception as e:
        print(f"Error sending welcome email: {e}")


@celery.task
def notify_webinar_registrants(webinar_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"""
    db = SessionLocal()
    try:
        webinar = db.scalar(
            select(models.Webinar)
            .where(models.Webinar.id == webinar_id)
        )

        if not webinar:
            return

        registrations = db.scalars(
            select(models.WebinarRegistration)
            .where(models.WebinarRegistration.webinar_id == webinar_id)
        ).all()

        for registration in registrations:
            # –í–Ω—É—Ç—Ä–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = models.Notification(
                user_id=registration.user_id,
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ",
                message=f"–í–µ–±–∏–Ω–∞—Ä '{webinar.title}' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å",
                notification_type="webinar_reminder",
                related_entity_type="webinar",
                related_entity_id=webinar_id
            )
            db.add(notification)

            # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            user_settings = db.scalar(
                select(models.UserSettings)
                .where(models.UserSettings.user_id == registration.user_id)
            )

            if user_settings and user_settings.email_notifications:
                send_webinar_reminder_email.delay(
                    registration.user.email,
                    webinar.title,
                    webinar.scheduled_at
                )

        db.commit()

    finally:
        db.close()


@celery.task
def send_webinar_reminder_email(user_email: str, webinar_title: str, scheduled_at: datetime):
    """Email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ"""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ send_welcome_email
    print(f"üìß Webinar reminder to {user_email}: {webinar_title} at {scheduled_at}")


@celery.task
def notify_followers_new_post(creator_id: int, post_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ"""
    db = SessionLocal()
    try:
        subscriptions = db.scalars(
            select(models.Subscription)
            .where(models.Subscription.creator_id == creator_id)
        ).all()

        post = db.scalar(
            select(models.Post).where(models.Post.id == post_id)
        )

        for subscription in subscriptions:
            notification = models.Notification(
                user_id=subscription.subscriber_id,
                title="–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞",
                message=f"–ê–≤—Ç–æ—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                notification_type="new_post",
                related_entity_type="post",
                related_entity_id=post_id
            )
            db.add(notification)

            # WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            send_websocket_notification.delay(
                subscription.subscriber_id,
                "new_post",
                {"post_id": post_id, "creator_id": creator_id}
            )

        db.commit()

    finally:
        db.close()


@celery.task
def send_websocket_notification(user_id: int, notification_type: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
    import redis
    import json

    r = redis.Redis(host='redis', port=6379, db=0)

    message = {
        'user_id': user_id,
        'type': notification_type,
        'data': data,
        'timestamp': datetime.now().isoformat()
    }

    r.publish(f'user_{user_id}', json.dumps(message))


@celery.task
def send_websocket_notification(user_id: int, notification_type: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
    import redis
    import json
    from datetime import datetime

    try:
        r = redis.Redis(host='redis', port=6379, db=0, decode_responses=True)

        message = {
            'user_id': user_id,
            'type': notification_type,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }

        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis –∫–∞–Ω–∞–ª
        r.publish(f'user_{user_id}', json.dumps(message))

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        print(f"WebSocket notification sent to user {user_id}: {notification_type}")

    except Exception as e:
        print(f"Error sending WebSocket notification: {e}")