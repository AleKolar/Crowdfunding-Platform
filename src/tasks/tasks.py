# src/tasks/tasks.py
from celery import Celery
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import logging

from src.config.settings import settings
from src.database import models
from src.repository.webinar_repository import webinar_repository
from src.services.email_service import email_service
from src.services.template_service import template_service

logger = logging.getLogger(__name__)

celery = Celery('crowdfunding')
celery.conf.broker_url = settings.CELERY_BROKER_URL
celery.conf.result_backend = settings.CELERY_RESULT_BACKEND

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
engine = create_engine(settings.DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


@celery.task
def send_welcome_email(user_email: str, username: str):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        subject = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrowdPlatform!"

        html_content = template_service.render_email_template(
            "welcome.html",
            username=username,
            platform_url=settings.PLATFORM_URL
        )

        if settings.ENVIRONMENT == "production":
            success = email_service.send_email(user_email, subject, html_content)
            if not success:
                logger.error(f"Failed to send welcome email to {user_email}")
        else:
            logger.info(f"üìß Welcome email prepared for {user_email}")

    except Exception as e:
        logger.error(f"Error sending welcome email: {e}")


@celery.task
def send_webinar_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–µ–±–∏–Ω–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = SessionLocal()
    try:
        from src.services.notification_service import notification_service
        webinars = webinar_repository.get_upcoming_webinars_for_reminders(db)

        for webinar in webinars:

            registrations = webinar_repository.get_registrations_for_reminder(db, webinar.id)

            for registration in registrations:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification_service.create_notification(
                    db=db,
                    user_id=registration.user_id,
                    title="üîî –í–µ–±–∏–Ω–∞—Ä —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è",
                    message=f"–í–µ–±–∏–Ω–∞—Ä '{webinar.title}' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å",
                    notification_type="webinar_reminder",
                    related_entity_type="webinar",
                    related_entity_id=webinar.id,
                    action_url=f"{settings.PLATFORM_URL}/webinars/{webinar.id}/join",
                    meta_data={
                        "webinar_title": webinar.title,
                        "scheduled_at": webinar.scheduled_at.isoformat(),
                        "webinar_id": webinar.id
                    }
                )

                webinar_repository.mark_reminder_sent(db, registration.id)

            db.commit()

    except Exception as e:
        logger.error(f"Error sending webinar reminders: {e}")
        db.rollback()
    finally:
        db.close()


@celery.task
def send_webinar_reminder_email(user_email: str, username: str, webinar_title: str, scheduled_at: datetime,
                                webinar_id: int):
    """Email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ"""
    try:
        subject = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–µ–±–∏–Ω–∞—Ä '{webinar_title}'"

        html_content = template_service.render_email_template(
            "webinar_reminder.html",
            username=username,
            webinar_title=webinar_title,
            scheduled_at=scheduled_at.strftime("%d.%m.%Y –≤ %H:%M"),
            duration=60,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            webinar_url=f"{settings.PLATFORM_URL}/webinars/{webinar_id}/join"
        )

        if settings.ENVIRONMENT == "production":
            email_service.send_email(user_email, subject, html_content)
        else:
            logger.info(f"üìß Webinar reminder prepared for {user_email}")

    except Exception as e:
        logger.error(f"Error sending webinar reminder: {e}")


@celery.task
def process_email_queue():
    """ –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ email"""
    db = SessionLocal()
    try:
        from src.services.email_service import email_service

        # –ë–µ—Ä–µ–º emails —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–Ω–∞—á–∞–ª–∞
        pending_emails = db.scalars(
            select(models.EmailQueue).where(
                models.EmailQueue.status == "pending"
            ).order_by(
                models.EmailQueue.priority.asc(),
                models.EmailQueue.created_at.asc()
            ).limit(10)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∑–∞ —Ä–∞–∑
        ).all()

        for email_job in pending_emails:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                success = email_service.send_email(
                    email_job.email,
                    email_job.subject,
                    email_job.template_data.get("message", "")
                )

                if success:
                    email_job.status = "sent"
                    email_job.sent_at = datetime.now()
                else:
                    email_job.status = "failed"
                    email_job.error_message = "SMTP error"

                db.commit()

            except Exception as e:
                email_job.retry_count += 1
                if email_job.retry_count >= email_job.max_retries:
                    email_job.status = "failed"
                    email_job.error_message = str(e)
                else:
                    email_job.status = "retrying"

                db.commit()
                logger.error(f"Error processing email queue item {email_job.id}: {e}")

    except Exception as e:
        logger.error(f"Error processing email queue: {e}")
        db.rollback()
    finally:
        db.close()


@celery.task
def cleanup_old_data():
    """ –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        thirty_days_ago = datetime.now() - timedelta(days=30)
        old_notifications = db.scalars(
            select(models.Notification).where(
                models.Notification.created_at < thirty_days_ago
            )
        ).all()

        for notification in old_notifications:
            db.delete(notification)

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        seven_days_ago = datetime.now() - timedelta(days=7)
        old_emails = db.scalars(
            select(models.EmailQueue).where(
                models.EmailQueue.sent_at < seven_days_ago
            )
        ).all()

        for email in old_emails:
            db.delete(email)

        db.commit()
        logger.info(f"Cleaned up {len(old_notifications)} notifications and {len(old_emails)} emails")

    except Exception as e:
        logger.error(f"Error cleaning up old data: {e}")
        db.rollback()
    finally:
        db.close()


@celery.task
def create_platform_notification(user_id: int, title: str, message: str, notification_type: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
    db = SessionLocal()
    try:
        notification = models.Notification(
            user_id=user_id,
            title=title,
            message=message,
            notification_type=notification_type,
            is_read=False
        )

        db.add(notification)
        db.commit()
        logger.info(f"Platform notification created for user {user_id}")

    except Exception as e:
        logger.error(f"Error creating platform notification: {e}")
        db.rollback()
    finally:
        db.close()


@celery.task
def notify_followers_new_post(creator_id: int, post_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ"""
    db = SessionLocal()
    try:
        subscriptions = db.scalars(
            select(models.Subscription).where(models.Subscription.creator_id == creator_id)
        ).all()

        post = db.scalar(select(models.Post).where(models.Post.id == post_id))

        if not post:
            return

        for subscription in subscriptions:
            notification = models.Notification(
                user_id=subscription.subscriber_id,
                title="–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞",
                message=f"–ê–≤—Ç–æ—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                notification_type="new_post"
            )
            db.add(notification)

        db.commit()

    except Exception as e:
        logger.error(f"Error notifying followers: {e}")
        db.rollback()
    finally:
        db.close()


@celery.task
def send_websocket_notification(user_id: int, notification_type: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
    try:
        import redis
        import json

        r = redis.Redis(
            host=settings.REDIS_HOST,
            port=settings.REDIS_PORT,
            db=settings.REDIS_DB,
            decode_responses=True
        )

        message = {
            'user_id': user_id,
            'type': notification_type,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }

        r.publish(f'user_{user_id}', json.dumps(message))
        logger.info(f"WebSocket notification sent to user {user_id}: {notification_type}")

    except Exception as e:
        logger.error(f"Error sending WebSocket notification: {e}")