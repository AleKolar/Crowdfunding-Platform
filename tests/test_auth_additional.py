# tests/test_auth_additional.py
import pytest
from unittest.mock import patch, AsyncMock
from fastapi.testclient import TestClient


def test_resend_sms_success(client: TestClient, test_user, mock_verification_codes):
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∏ Email"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤...")

    response = client.post("/auth/resend-code", json={"email": test_user.email})

    print(f"üìä Status: {response.status_code}")
    print(f"üìã Response: {response.text}")

    if response.status_code == 200:
        data = response.json()
        print("‚úÖ –ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ!")

        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –û–¢–í–ï–¢ –° –ú–û–ö–û–ú
        assert "message" in data
        assert data["test_sms_code"] == "123456"  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –º–æ–∫–∞
        assert data["test_email_code"] == "123456"  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –º–æ–∫–∞
        assert data["user_phone"] == test_user.phone
        assert data["user_email"] == test_user.email

        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ú–û–ö –ë–´–õ –í–´–ó–í–ê–ù
        assert mock_verification_codes.called
        print("‚úÖ generate_and_send_verification_codes –±—ã–ª –≤—ã–∑–≤–∞–Ω!")

    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")


def test_resend_sms_debug_mock(client: TestClient, test_user):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–∫–∞"""
    print("\nüêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–∫–∞ generate_and_send_verification_codes...")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
    test_paths = [
        'src.security.auth.generate_and_send_verification_codes',
        'src.endpoints.auth.generate_and_send_verification_codes',
    ]

    for path in test_paths:
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç—å: {path}")

        with patch(path, new_callable=AsyncMock) as mock:
            mock.return_value = {
                "sms_code": "999999",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
                "email_code": "999999",
                "sms_sent": True,
                "email_sent": True
            }

            response = client.post("/auth/resend-code", json={"email": test_user.email})
            print(f"üìä Status: {response.status_code}, Mock called: {mock.called}")

            if response.status_code == 200:
                data = response.json()
                print(f"üìã test_sms_code –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data.get('test_sms_code')}")

                if data.get('test_sms_code') == "999999":
                    print(f"üéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨: {path}")
                    return

    print("‚ùå –ù–∏ –æ–¥–∏–Ω –ø—É—Ç—å –º–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!")


def test_resend_sms_with_endpoint_mock(client: TestClient, test_user):
    """–ú–æ–∫–∞–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ endpoints/auth.py"""
    print("\nüì± –¢–µ—Å—Ç —Å –º–æ–∫–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ endpoints...")

    # –ú–æ–∫–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–∞–º, –≥–¥–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ endpoints/auth.py
    with patch('src.endpoints.auth.generate_and_send_verification_codes', new_callable=AsyncMock) as mock:
        mock.return_value = {
            "sms_code": "123456",
            "email_code": "123456",
            "sms_sent": True,
            "email_sent": True
        }

        response = client.post("/auth/resend-code", json={"email": test_user.email})

        print(f"üìä Status: {response.status_code}")
        print(f"üîß Mock called: {mock.called}")

        if response.status_code == 200:
            data = response.json()
            print(f"üìã test_sms_code: {data.get('test_sms_code')}")

            if data.get('test_sms_code') == "123456":
                print("‚úÖ –ú–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ endpoints!")
            else:
                print(f"‚ùå –ú–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {data.get('test_sms_code')}")


def test_resend_sms_simple(client: TestClient, test_user):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –º–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("\nüì± –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /auth/resend-code...")

    response = client.post("/auth/resend-code", json={"email": test_user.email})

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 200:
        data = response.json()
        print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        assert "message" in data
        assert "test_sms_code" in data
        assert "test_email_code" in data
        assert "user_phone" in data
        assert "user_email" in data
        print(f"üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: SMS={data['test_sms_code']}, Email={data['test_email_code']}")
    else:
        print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–Ω—É–ª: {response.status_code}")


def test_logout_success(client: TestClient):
    """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")

    response = client.post("/auth/logout")

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 200:
        data = response.json()
        assert "message" in data
        print("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_protected_endpoint_without_auth(client: TestClient):
    """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")

    response = client.get("/auth/protected-data")

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 401:
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_validation_errors(client: TestClient):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

    invalid_cases = [
        {
            "data": {"email": "invalid-email", "secret_code": "1234"},
            "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "123"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ < 4 —Ü–∏—Ñ—Ä"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "12345"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ > 4 —Ü–∏—Ñ—Ä"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "12a4"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Å –±—É–∫–≤–∞–º–∏"
        }
    ]

    for case in invalid_cases:
        response = client.post("/auth/login", json=case["data"])
        print(f"  {case['description']} -> {response.status_code}")

        if response.status_code == 422:
            print("    ‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            print(f"    üìå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")


@pytest.mark.asyncio
async def test_webinar_registration_auth_required(client: TestClient, test_webinar):
    """–¢–µ—Å—Ç —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤...")

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    response = client.post(f"/webinars/{test_webinar.id}/register")

    print(f"üìä –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")

    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 401 –∏–ª–∏ 403
    if response.status_code in [401, 403]:
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_test_email_endpoint(client: TestClient):
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email"""
    print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /auth/test-email...")

    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
    with patch('src.services.email_service.email_service.send_welcome_email', new_callable=AsyncMock) as mock_email:
        mock_email.return_value = True

        response = client.post("/auth/test-email", json={"to_email": "test@example.com"})

        print(f"üìä Status: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            assert "message" in data
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç test-email —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_me_endpoint_with_real_auth(client: TestClient, test_user):
    """–¢–µ—Å—Ç /auth/me —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /auth/me —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")

    # –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    login_data = {
        "email": test_user.email,
        "secret_code": "5678"  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ test_user
    }

    # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
    with patch('src.services.auth_service.authenticate_user') as mock_auth, \
            patch('src.security.auth.generate_and_send_verification_codes') as mock_verification:

        mock_auth.return_value = test_user
        mock_verification.return_value = AsyncMock(return_value={
            "sms_code": "123456",
            "email_code": "123456",
            "sms_sent": True,
            "email_sent": True
        })

        # –õ–æ–≥–∏–Ω–∏–º—Å—è (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø)
        login_response = client.post("/auth/login", json=login_data)

        if login_response.status_code == 200:
            login_data = login_response.json()
            user_id = login_data["user_id"]

            # –ú–æ–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é 2FA
            with patch('src.security.auth.verify_sms_code') as mock_verify:
                mock_verify.return_value = True

                # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º 2FA
                verify_response = client.post("/auth/verify-2fa", json={
                    "user_id": user_id,
                    "sms_code": "123456"
                })

                if verify_response.status_code == 200:
                    token_data = verify_response.json()
                    access_token = token_data["access_token"]

                    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º /auth/me —Å —Ç–æ–∫–µ–Ω–æ–º
                    headers = {"Authorization": f"Bearer {access_token}"}
                    me_response = client.get("/auth/me", headers=headers)

                    print(f"üìä /auth/me Status: {me_response.status_code}")

                    if me_response.status_code == 200:
                        me_data = me_response.json()
                        print(f"‚úÖ /auth/me —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞–Ω–Ω—ã–µ: {me_data}")
                    else:
                        print(f"‚ùå /auth/me –≤–µ—Ä–Ω—É–ª: {me_response.status_code}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è edge cases
def test_resend_code_no_email(client: TestClient):
    """–¢–µ—Å—Ç resend-code –±–µ–∑ email"""
    print("\nüì± –¢–µ—Å—Ç resend-code –±–µ–∑ email...")

    response = client.post("/auth/resend-code", json={})

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 400:
        data = response.json()
        assert "detail" in data
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ email!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_resend_code_invalid_email(client: TestClient):
    """–¢–µ—Å—Ç resend-code —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email"""
    print("\nüì± –¢–µ—Å—Ç resend-code —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email...")

    response = client.post("/auth/resend-code", json={"email": "nonexistent@example.com"})

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 404:
        data = response.json()
        assert "detail" in data
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")

# pytest tests/test_auth_additional.py -v -s