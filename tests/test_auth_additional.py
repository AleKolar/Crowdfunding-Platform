# tests/test_auth_additional.py
import pytest
from unittest.mock import patch, MagicMock
from fastapi.testclient import TestClient


def test_resend_sms_success(client: TestClient, test_user):
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS...")

    with patch('src.services.auth_service.generate_and_send_sms_code') as mock_sms:
        mock_sms.return_value = None

        response = client.post("/auth/resend-sms", json={"user_id": test_user.id})

        print(f"üìä Status: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
            assert mock_sms.called
        elif response.status_code == 404:
            print("‚ö†Ô∏è  –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)")
        else:
            print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_logout_success(client: TestClient):
    """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")

    response = client.post("/auth/logout")

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 200:
        data = response.json()
        assert "message" in data
        print("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_protected_endpoint_without_auth(client: TestClient):
    """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")

    response = client.get("/auth/protected-data")

    print(f"üìä Status: {response.status_code}")

    if response.status_code == 401:
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")


def test_validation_errors(client: TestClient):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

    invalid_cases = [
        {
            "data": {"email": "invalid-email", "secret_code": "1234"},
            "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "123"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ < 4 —Ü–∏—Ñ—Ä"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "12345"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ > 4 —Ü–∏—Ñ—Ä"
        },
        {
            "data": {"email": "test@example.com", "secret_code": "12a4"},
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Å –±—É–∫–≤–∞–º–∏"
        }
    ]

    for case in invalid_cases:
        response = client.post("/auth/login", json=case["data"])
        print(f"  {case['description']} -> {response.status_code}")

        if response.status_code == 422:
            print("    ‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            print(f"    üìå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")


@pytest.mark.asyncio
async def test_webinar_registration_auth_required(client: TestClient, test_webinar):
    """–¢–µ—Å—Ç —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤...")

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    response = client.post(f"/webinars/{test_webinar.id}/register")

    print(f"üìä –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")

    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 401 –∏–ª–∏ 403
    if response.status_code in [401, 403]:
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
    else:
        print(f"üìå –°—Ç–∞—Ç—É—Å: {response.status_code}")

# pytest tests/test_auth_additional.py -v -s