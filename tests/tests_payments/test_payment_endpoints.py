# src/tests/tests_payments/test_payment_endpoints.py
from fastapi import status
from unittest.mock import patch, AsyncMock


class TestPaymentEndpoints:
    """–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""

    def test_create_donation_success(self, client, current_user_mock):
        """–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞"""
        donation_data = {
            "amount": 1000.0,
            "project_id": 1,
            "currency": "rub"
        }

        with patch('src.endpoints.payments.payment_service.create_donation_intent',
                   new_callable=AsyncMock) as mock_service:
            mock_service.return_value = {
                'client_secret': 'cs_test_secret',
                'payment_intent_id': 'pi_test123',
                'donation_id': 1
            }

            response = client.post("/payments/donate", json=donation_data)

            print(f"üì• Create donation status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert "client_secret" in data
            assert "payment_intent_id" in data
            assert "donation_id" in data

    def test_create_donation_invalid_amount(self, client):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—É–º–º–æ–π"""
        donation_data = {
            "amount": -100.0,
            "project_id": 1,
            "currency": "rub"
        }

        response = client.post("/payments/donate", json=donation_data)

        print(f"üì• Invalid amount status: {response.status_code}")

        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY

    def test_create_donation_project_not_found(self, client):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        donation_data = {
            "amount": 1000.0,
            "project_id": 999,
            "currency": "rub"
        }

        with patch('src.endpoints.payments.payment_service.create_donation_intent',
                   new_callable=AsyncMock) as mock_service:
            from fastapi import HTTPException
            mock_service.side_effect = HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

            response = client.post("/payments/donate", json=donation_data)

            print(f"üì• Project not found status: {response.status_code}")

            assert response.status_code == status.HTTP_400_BAD_REQUEST ### !!!


class TestDonationHistoryEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–Ω–∞—Ç–æ–≤"""

    def test_get_project_donations(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        project_id = 1

        with patch('src.repository.donations_repository.donations_repository.get_by_project',
                   new_callable=AsyncMock) as mock_get:
            class MockDonation:
                def __init__(self, id, amount, currency, status, created_at, donor_id, project_id):
                    self.id = id
                    self.amount = amount
                    self.currency = currency
                    self.status = status
                    self.created_at = created_at
                    self.donor_id = donor_id
                    self.project_id = project_id

            mock_get.return_value = [
                MockDonation(1, 1000.0, "RUB", "completed", "2023-01-01T00:00:00", 1, project_id),
                MockDonation(2, 500.0, "RUB", "completed", "2023-01-02T00:00:00", 2, project_id)
            ]

            response = client.get(f"/payments/donations/project/{project_id}")

            print(f"üì• Project donations status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert len(data) == 2
            assert data[0]["amount"] == 1000.0
            assert data[1]["amount"] == 500.0

    def test_get_my_donations(self, client, current_user_mock):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('src.repository.donations_repository.donations_repository.get_by_donor',
                   new_callable=AsyncMock) as mock_get:
            class MockDonation:
                def __init__(self, id, amount, currency, status, created_at, donor_id, project_id):
                    self.id = id
                    self.amount = amount
                    self.currency = currency
                    self.status = status
                    self.created_at = created_at
                    self.donor_id = donor_id
                    self.project_id = project_id

            mock_get.return_value = [
                MockDonation(1, 1000.0, "RUB", "completed", "2023-01-01T00:00:00", current_user_mock.id, 1)
            ]

            response = client.get("/payments/donations/my")

            print(f"üì• My donations status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert len(data) == 1
            assert data[0]["donor_id"] == current_user_mock.id


class TestWebhookEndpoints:
    """–¢–µ—Å—Ç—ã –≤–µ–±—Ö—É–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""

    def test_webhook_invalid_signature(self, client):
        """–í–µ–±—Ö—É–∫ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"""
        with patch('src.services.payment_service.stripe.Webhook.construct_event') as mock_construct:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Stripe
            import stripe
            try:
                # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Stripe
                SignatureVerificationError = stripe.SignatureVerificationError
            except AttributeError:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Stripe
                SignatureVerificationError = stripe.error.SignatureVerificationError

            mock_construct.side_effect = SignatureVerificationError(
                "Invalid signature", "sig_header"
            )

            response = client.post(
                "/payments/webhook",
                data=b"test payload",
                headers={"stripe-signature": "invalid_signature"}
            )

            print(f"üì• Invalid signature status: {response.status_code}")

            assert response.status_code == status.HTTP_400_BAD_REQUEST


class TestPaymentErrorScenarios:
    """–¢–µ—Å—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π"""

    def test_payment_status_not_found(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment_intent_id = "pi_nonexistent"

        with patch('src.services.payment_service.stripe.PaymentIntent.retrieve') as mock_retrieve:
            import stripe
            try:
                StripeError = stripe.StripeError
            except AttributeError:
                # !!! –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Stripe
                StripeError = stripe.error.StripeError

            mock_retrieve.side_effect = StripeError("Payment intent not found")

            response = client.get(f"/payments/status/{payment_intent_id}")

            print(f"üì• Payment not found status: {response.status_code}")

            assert response.status_code == status.HTTP_400_BAD_REQUEST


class TestAdditionalPaymentEndpoints:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""

    def test_get_recent_project_donations(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–Ω–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        project_id = 1

        with patch('src.repository.donations_repository.donations_repository.get_recent_donations',
                   new_callable=AsyncMock) as mock_get:
            class MockDonation:
                def __init__(self, id, amount, currency, status, created_at, donor_id, project_id):
                    self.id = id
                    self.amount = amount
                    self.currency = currency
                    self.status = status
                    self.created_at = created_at
                    self.donor_id = donor_id
                    self.project_id = project_id

            mock_get.return_value = [
                MockDonation(1, 1000.0, "RUB", "completed", "2023-01-01T00:00:00", 1, project_id)
            ]

            response = client.get(f"/payments/donations/project/{project_id}/recent")

            print(f"üì• Recent donations status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert len(data) == 1
            assert data[0]["amount"] == 1000.0

    def test_create_refund_success(self, client, current_user_mock):
        """–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        payment_intent_id = "pi_test123"

        with patch('src.endpoints.payments.payment_service.create_refund',
                   new_callable=AsyncMock) as mock_service:
            mock_service.return_value = "re_test123"

            response = client.post(f"/payments/refund/{payment_intent_id}")

            print(f"üì• Refund status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert "refund_id" in data
            assert data["status"] == "refund_created"

    def test_create_refund_with_amount(self, client, current_user_mock):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        payment_intent_id = "pi_test123"

        with patch('src.endpoints.payments.payment_service.create_refund',
                   new_callable=AsyncMock) as mock_service:
            mock_service.return_value = "re_test123"

            response = client.post(
                f"/payments/refund/{payment_intent_id}",
                params={"amount": 500.0}
            )

            print(f"üì• Partial refund status: {response.status_code}")
            print(f"üì• Response: {response.text}")

            assert response.status_code == status.HTTP_200_OK

# pytest tests/tests_payments/test_payment_endpoints.py --html=report.html