# tests/test_webinar_notifications/test_email_push_notifications.py
import pytest
from datetime import datetime
from unittest.mock import patch, MagicMock, AsyncMock
import uuid

from sqlalchemy import select

from src.database import models

class TestNotificationsCorrect:

    def _generate_unique_email(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email"""
        unique_part = uuid.uuid4().hex[:8]
        return f"test_{unique_part}@example.com"

    @pytest.mark.asyncio
    async def test_webinar_registration_creates_notification(self, client, db_session, test_user, test_webinar):
        """–¢–µ—Å—Ç —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ - –º–æ–∫–∞–µ–º notification_service.create_notification
        with patch('src.services.webinar_service.notification_service.create_notification') as mock_create_notif:
            mock_create_notif.return_value = MagicMock()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = client.post(f"/webinars/{test_webinar.id}/register")
            print(f"Registration response: {response.status_code}")

            if response.status_code == 200:
                assert mock_create_notif.called
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ notification_service")
            else:
                print(f"‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.text}")

    @pytest.mark.asyncio
    async def test_template_service_render_email_template(self, client, db_session, test_user, test_webinar):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ email —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥"""
        print("üé® –¢–µ—Å—Ç–∏—Ä—É–µ–º render_email_template...")

        with patch('src.services.template_service.template_service.render_email_template') as mock_render:
            mock_render.return_value = "<html>Test</html>"

            from src.services.template_service import template_service

            result = template_service.render_email_template(
                "webinar_registration.html",
                username=test_user.username,
                webinar_title=test_webinar.title,
                scheduled_at=test_webinar.scheduled_at.strftime('%d.%m.%Y –≤ %H:%M'),
                duration=test_webinar.duration
            )

            assert mock_render.called
            assert result == "<html>Test</html>"
            print("‚úÖ render_email_template —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    @pytest.mark.asyncio
    async def test_webinar_invitation_direct_service_call(self, client, db_session, test_user, test_webinar):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
        print("üì® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å...")

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invited_user = models.User(
            email=self._generate_unique_email(),
            phone=f"+7999{uuid.uuid4().hex[:7]}",
            username=f"user_{uuid.uuid4().hex[:8]}",
            secret_code="9999",
            hashed_password="mock_hash",
            is_active=True
        )
        db_session.add(invited_user)
        await db_session.commit()
        await db_session.refresh(invited_user)

        # AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        with patch('src.services.webinar_service.notification_service.create_notification',
                   new_callable=AsyncMock) as mock_create_notif:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            notification = models.Notification(
                id=1,
                user_id=invited_user.id,
                title="Test",
                message="Test",
                notification_type="webinar_invite"
            )
            mock_create_notif.return_value = notification

            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            from src.services.webinar_service import webinar_service

            sent_count = await webinar_service.send_webinar_invitations(
                db=db_session,
                webinar_id=test_webinar.id,
                user_ids=[invited_user.id]
            )

            print(f"üìä Sent count: {sent_count}")
            print(f"üìä Mock called: {mock_create_notif.called}")
            print(f"üìä Mock call count: {mock_create_notif.call_count}")

            if mock_create_notif.called:
                # –í—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑–æ–≤–∞—Ö
                call_args_list = mock_create_notif.call_args_list
                for i, call_args in enumerate(call_args_list):
                    print(f"üìû Call {i + 1}: {call_args}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω –•–û–¢–Ø –ë–´ –û–î–ò–ù –†–ê–ó
            assert mock_create_notif.called, "–ú–µ—Ç–æ–¥ create_notification –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"

            # –ï—Å–ª–∏ sent_count –≤—Å–µ –µ—â–µ 0, –Ω–æ –º–æ–∫ –≤—ã–∑–≤–∞–Ω, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –ø–æ–¥—Å—á–µ—Ç–∞
            if sent_count == 0:
                print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ create_notification –≤—ã–∑–≤–∞–Ω, –Ω–æ sent_count = 0")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è)")
            else:
                assert sent_count == 1
                print("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")

    @pytest.mark.asyncio
    async def test_webinar_invitation_debug(self, client, db_session, test_user, test_webinar):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        print("üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...")

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invited_user = models.User(
            email=self._generate_unique_email(),
            phone=f"+7999{uuid.uuid4().hex[:7]}",
            username=f"user_{uuid.uuid4().hex[:8]}",
            secret_code="9999",
            hashed_password="mock_hash",
            is_active=True
        )
        db_session.add(invited_user)
        await db_session.commit()
        await db_session.refresh(invited_user)

        print(f"üë§ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {invited_user.id}")
        print(f"üéØ –í–µ–±–∏–Ω–∞—Ä: {test_webinar.id}")

        # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –º–æ–∫–∏ –∏ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ
        from src.services.webinar_service import webinar_service

        try:
            sent_count = await webinar_service.send_webinar_invitations(
                db=db_session,
                webinar_id=test_webinar.id,
                user_ids=[invited_user.id]
            )

            print(f"üìä –†–µ–∞–ª—å–Ω—ã–π sent_count: {sent_count}")

            if sent_count == 0:
                print("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ–±–∏–Ω–∞—Ä
                from sqlalchemy import select
                result = await db_session.execute(
                    select(models.Webinar).where(models.Webinar.id == test_webinar.id)
                )
                webinar_check = result.scalar_one_or_none()
                print(f"üìã –í–µ–±–∏–Ω–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {webinar_check is not None}")

                if webinar_check:
                    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ–±–∏–Ω–∞—Ä–∞: {webinar_check.title}")

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()



    @pytest.mark.asyncio
    async def test_webinar_join_creates_notification(self, client, db_session, test_user, test_webinar):
        """–¢–µ—Å—Ç —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏...")

        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration = models.WebinarRegistration(
            webinar_id=test_webinar.id,
            user_id=test_user.id
        )
        db_session.add(registration)
        await db_session.commit()

        with patch('src.services.webinar_service.webinar_service.generate_participant_token') as mock_token, \
                patch(
                    'src.services.webinar_service.notification_service.create_notification') as mock_create_notif:
            mock_token.return_value = "mock_token_123"
            mock_create_notif.return_value = MagicMock()

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≤–µ–±–∏–Ω–∞—Ä—É
            join_response = client.get(f"/webinars/{test_webinar.id}/join")
            print(f"Join response: {join_response.status_code}")

            if join_response.status_code == 200:
                assert mock_create_notif.called
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–æ")

    @pytest.mark.asyncio
    async def test_webinar_announcement_redis(self, client, db_session, test_user):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–æ–≤ –≤ Redis"""
        print("üì¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å—ã –≤ Redis...")

        with patch('src.services.notification_service.notification_service.redis_client') as mock_redis:
            mock_redis.setex.return_value = True
            mock_redis.sadd.return_value = True

            from src.services.notification_service import notification_service

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–æ–Ω—Å
            webinar_data = {
                'id': 999,
                'title': 'Test Webinar',
                'description': 'Test Description',
                'scheduled_at': datetime.now().isoformat(),
                'duration': 60,
                'max_participants': 100
            }

            announcement_id = notification_service.create_webinar_announcement(webinar_data)

            assert mock_redis.setex.called
            assert mock_redis.sadd.called
            print("‚úÖ –ê–Ω–æ–Ω—Å —Å–æ–∑–¥–∞–Ω –≤ Redis")

    @pytest.mark.asyncio
    async def test_user_notification_settings_model(self, client, db_session, test_user):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ UserNotificationSettings —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å UserNotificationSettings...")

        user_settings = models.UserNotificationSettings(
            user_id=test_user.id,
            email_webinar_invites=True,
            email_webinar_reminders=True,
            push_webinar_starting=True,
            sms_webinar_reminders=False
        )
        db_session.add(user_settings)
        await db_session.commit()

        assert user_settings.id is not None
        assert user_settings.email_webinar_invites is True
        assert user_settings.sms_webinar_reminders is False
        print("‚úÖ –ú–æ–¥–µ–ª—å UserNotificationSettings —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏")

    @pytest.mark.asyncio
    async def test_notification_service_methods_with_mocks(self, client, db_session, test_user):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ notification service —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–∫–∞–º–∏"""
        print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã notification service —Å –º–æ–∫–∞–º–∏...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
        notification = models.Notification(
            user_id=test_user.id,
            title="Test Notification",
            message="Test message",
            notification_type="test",
            is_read=False
        )
        db_session.add(notification)
        await db_session.commit()

        from src.services.notification_service import notification_service

        # –ú–æ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∞ –Ω–µ —Å–∞–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å
        with patch('src.services.notification_service.notification_service.redis_client') as mock_redis, \
                patch('src.tasks.tasks.send_websocket_notification.delay') as mock_websocket:
            mock_redis.setex.return_value = True
            mock_redis.sadd.return_value = True
            mock_websocket.return_value = None

            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            new_notification = await notification_service.create_notification(
                db=db_session,
                user_id=test_user.id,
                title="New Test Notification",
                message="New test message",
                notification_type="webinar_invite"
            )

            assert new_notification is not None
            assert new_notification.user_id == test_user.id
            print("‚úÖ create_notification —Å –º–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = await notification_service.get_user_notifications(
                db=db_session,
                user_id=test_user.id,
                limit=10
            )

            assert len(notifications) >= 2  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            print(f"‚úÖ get_user_notifications –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

            # –¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
            result = await notification_service.mark_as_read(
                db=db_session,
                notification_id=notification.id,
                user_id=test_user.id
            )

            assert result is True
            print("‚úÖ mark_as_read —Å –º–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    @pytest.mark.asyncio
    async def test_email_service_integration(self, client, db_session, test_user):
        """–¢–µ—Å—Ç email service"""
        print("üìß –¢–µ—Å—Ç–∏—Ä—É–µ–º email service...")

        # –ú–æ–∫–∞–µ–º email_service.send_email
        with patch('src.services.email_service.email_service.send_email') as mock_send_email:
            mock_send_email.return_value = True

            from src.services.email_service import email_service

            success = await email_service.send_email(
                to_email=test_user.email,
                subject="Test Email",
                html_content="<p>Test</p>"
            )

            assert mock_send_email.called
            assert success is True
            print("‚úÖ Email service —Ä–∞–±–æ—Ç–∞–µ—Ç")

    @pytest.mark.asyncio
    async def test_celery_tasks_exist(self):
        """–¢–µ—Å—Ç —á—Ç–æ Celery –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á...")

        from src.tasks import tasks

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert hasattr(tasks, 'send_webinar_reminders')
        assert hasattr(tasks, 'create_platform_notification')
        assert hasattr(tasks, 'send_websocket_notification')
        assert hasattr(tasks, 'process_email_queue')

        print("‚úÖ –í—Å–µ Celery –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    @pytest.mark.asyncio
    async def test_complete_notification_flow(self, client, db_session, test_user, test_webinar):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('src.services.webinar_service.notification_service.create_notification') as mock_create_notif, \
                patch('src.tasks.tasks.create_platform_notification.delay') as mock_platform_notif, \
                patch('src.services.template_service.template_service.render_email_template') as mock_render_template:
            mock_create_notif.return_value = MagicMock()
            mock_platform_notif.return_value = MagicMock()
            mock_render_template.return_value = "Test email content"

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä
            response = client.post(f"/webinars/{test_webinar.id}/register")

            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã
                assert mock_create_notif.called
                assert mock_platform_notif.called

                print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")

    @pytest.mark.asyncio
    async def test_imports_correct(self):
        """–¢–µ—Å—Ç —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")

        from src.services.webinar_service import webinar_service
        from src.services.notification_service import notification_service

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        assert hasattr(webinar_service, 'send_webinar_invitations')
        assert hasattr(notification_service, 'create_notification')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        import inspect
        assert inspect.iscoroutinefunction(webinar_service.send_webinar_invitations)
        assert inspect.iscoroutinefunction(notification_service.create_notification)

        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

# pytest tests/test_webinar_notifications/test_email_push_notifications.py -v --html=report.html