# tests/test_webinar_notifications/test_email_push_notifications.py
import pytest
from unittest.mock import patch, MagicMock, AsyncMock
import uuid

from sqlalchemy import select

from src.database import models

class TestNotificationsCorrect:

    def _generate_unique_email(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email"""
        unique_part = uuid.uuid4().hex[:8]
        return f"test_{unique_part}@example.com"

    @pytest.mark.asyncio
    async def test_webinar_registration_creates_notification(self, client, db_session, test_user, test_webinar):
        """–¢–µ—Å—Ç —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ - –º–æ–∫–∞–µ–º notification_service.create_notification
        with patch('src.services.webinar_service.notification_service.create_notification') as mock_create_notif:
            mock_create_notif.return_value = MagicMock()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = client.post(f"/webinars/{test_webinar.id}/register")
            print(f"Registration response: {response.status_code}")

            if response.status_code == 200:
                assert mock_create_notif.called
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ notification_service")
            else:
                print(f"‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.text}")

    @pytest.mark.asyncio
    async def test_celery_tasks_exist(self):
        """–¢–µ—Å—Ç —á—Ç–æ Celery –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á...")

        from src.tasks import tasks

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π
        required_tasks = [
            'send_webinar_reminders',
            'send_welcome_email',
            'send_verification_codes',
            'process_email_queue',
            'cleanup_old_data',
            'create_platform_notification',
            'send_websocket_notification',
            'send_verification_codes_task'
        ]

        for task_name in required_tasks:
            assert hasattr(tasks, task_name), f"–ó–∞–¥–∞—á–∞ {task_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    @pytest.mark.asyncio
    async def test_complete_notification_flow(self, client, db_session, test_user, test_webinar):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('src.services.webinar_service.notification_service.create_notification') as mock_create_notif, \
                patch('src.tasks.tasks.create_platform_notification.delay') as mock_platform_notif, \
                patch('src.services.template_service.template_service.render_email_template') as mock_render_template:
            mock_create_notif.return_value = MagicMock()
            mock_platform_notif.return_value = MagicMock()
            mock_render_template.return_value = "Test email content"

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä
            response = client.post(f"/webinars/{test_webinar.id}/register")

            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã
                assert mock_create_notif.called
                # mock_platform_notif –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏
                print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")

# pytest tests/test_webinar_notifications/test_email_push_notifications.py -v --html=report.html