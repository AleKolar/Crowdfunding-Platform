# tests/test_mock_diagnostic.py
import pytest
from unittest.mock import patch
from fastapi.testclient import TestClient


def test_find_correct_mock_path(client: TestClient, test_user):
    """–¢–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –º–æ–∫–∞"""
    print("\nüîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –º–æ–∫–∞...")

    login_data = {
        "email": test_user.email,
        "secret_code": "5678"
    }

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
    mock_paths = [
        'src.endpoints.auth.authenticate_user',
        'src.security.auth.authenticate_user',
        'src.services.auth_service.authenticate_user',
        'main.authenticate_user',
    ]

    for mock_path in mock_paths:
        print(f"\nüîß –ü—Ä–æ–±—É–µ–º –º–æ–∫: {mock_path}")

        try:
            with patch(mock_path) as mock_auth:
                mock_auth.return_value = test_user

                response = client.post("/auth/login", json=login_data)
                print(f"   Status: {response.status_code}")
                print(f"   Mock called: {mock_auth.called}")

                if mock_auth.called:
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨: {mock_path}")
                    break
                else:
                    print(f"   ‚ùå –ú–æ–∫ –Ω–µ –≤—ã–∑–≤–∞–ª—Å—è")

        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")


def test_trace_imports():
    """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("\nüîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        from src.endpoints import auth as endpoints_auth
        print("‚úÖ src.endpoints.auth –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        if hasattr(endpoints_auth, 'authenticate_user'):
            print("   üìç authenticate_user –Ω–∞–π–¥–µ–Ω –≤ endpoints.auth")
        else:
            print("   ‚ùå authenticate_user –ù–ï –Ω–∞–π–¥–µ–Ω –≤ endpoints.auth")
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å endpoints.auth: {e}")

    try:
        from src.security import auth as security_auth
        print("‚úÖ src.security.auth –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        if hasattr(security_auth, 'authenticate_user'):
            print("   üìç authenticate_user –Ω–∞–π–¥–µ–Ω –≤ security.auth")
        else:
            print("   ‚ùå authenticate_user –ù–ï –Ω–∞–π–¥–µ–Ω –≤ security.auth")
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å security.auth: {e}")

    try:
        from src.services import auth_service as service_auth
        print("‚úÖ src.services.auth_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        if hasattr(service_auth, 'authenticate_user'):
            print("   üìç authenticate_user –Ω–∞–π–¥–µ–Ω –≤ auth_service")
        else:
            print("   ‚ùå authenticate_user –ù–ï –Ω–∞–π–¥–µ–Ω –≤ auth_service")
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å auth_service: {e}")

# pytest tests/test_mock_diagnostic.py --html=report.html --self-contained-html