# tests/conftest.py
import os
import sys

import pytest
import uuid
from fastapi.testclient import TestClient
from fastapi import FastAPI
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

print(f"üîß Project root: {project_root}")

# –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
try:
    from main import app as main_app
    from src.database.postgres import get_db
    from src.database.models.base import Base
    from src.endpoints.auth import auth_router
    from src.endpoints.payments import payments_router
    from src.endpoints.projects import projects_router
    from src.security.auth import get_current_user

    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
def mock_get_password_hash(password):
    """–ú–æ–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è - –æ–±—Ö–æ–¥–∏—Ç bcrypt –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    print(f"‚úÖ MOCK get_password_hash called with: '{password}' (length: {len(password)})")
    # –ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ –±–µ–∑ bcrypt - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    return f"mock_hash_{password}"


def mock_verify_password(plain_password, hashed_password):
    """–ú–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
    print(f"‚úÖ MOCK verify_password called with: '{plain_password}' vs '{hashed_password}'")
    if hashed_password.startswith("mock_hash_"):
        expected_password = hashed_password.replace("mock_hash_", "")
        return plain_password == expected_password
    return False


# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–∫–∏ –∫ –º–æ–¥—É–ª—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –î–û —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    import src.security.auth as auth_module

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
    auth_module.original_get_password_hash = auth_module.get_password_hash
    auth_module.original_verify_password = auth_module.verify_password

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–∫–∏
    auth_module.get_password_hash = mock_get_password_hash
    auth_module.verify_password = mock_verify_password

    print("‚úÖ –ú–æ–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ auth –º–æ–¥—É–ª—é")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–∫–∏ –∫ auth –º–æ–¥—É–ª—é: {e}")


# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    test_app = FastAPI(
        title="Test Crowdfunding Platform API",
        description="–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        version="1.0.0",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    test_app.include_router(auth_router)
    test_app.include_router(payments_router)
    test_app.include_router(projects_router)

    # Health check
    @test_app.get("/health")
    async def health_check():
        return {"status": "healthy", "environment": "test"}

    return test_app


# –¢–µ—Å—Ç–æ–≤–∞—è –ë–î
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture
def current_user_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –º–æ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    class MockUser:
        def __init__(self):
            self.id = 1
            self.email = "test@example.com"
            self.username = "testuser"
            self.is_active = True

    return MockUser()

@pytest.fixture
def valid_register_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    unique_id = uuid.uuid4().hex[:8]
    return {
        "email": f"test_{unique_id}@example.com",
        "phone": f"+7999{unique_id[:7]}",
        "username": f"user_{unique_id}",
        "is_active": True,
        "password": "TestPass123!",
        "secret_code": "123456"
    }


@pytest.fixture
def mock_project_response():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –º–æ–∫–æ–º –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    return {
        "id": 1,
        "title": "Test Project",
        "description": "Test project description",
        "short_description": "Test short description",
        "goal_amount": 5000.0,
        "category": "technology",
        "tags": ["tech", "innovation"],
        "creator_id": 1,
        "current_amount": 0.0,
        "status": "draft",
        "is_featured": False,
        "created_at": "2023-01-01T00:00:00",
        "updated_at": "2023-01-01T00:00:00",
        "views_count": 0,
        "likes_count": 0,
        "shares_count": 0,
        "backers_count": 0,
        "progress_percentage": 0.0,
        "days_remaining": None,
        "is_funded": False
    }


@pytest.fixture
def mock_project_with_media_response():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –º–æ–∫–æ–º –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–µ–¥–∏–∞"""
    return {
        "id": 1,
        "title": "Test Project",
        "description": "Test project description",
        "short_description": "Test short description",
        "goal_amount": 5000.0,
        "category": "technology",
        "tags": ["tech", "innovation"],
        "creator_id": 1,
        "current_amount": 0.0,
        "status": "draft",
        "is_featured": False,
        "created_at": "2023-01-01T00:00:00",
        "updated_at": "2023-01-01T00:00:00",
        "views_count": 0,
        "likes_count": 0,
        "shares_count": 0,
        "backers_count": 0,
        "progress_percentage": 0.0,
        "days_remaining": None,
        "is_funded": False,
        "media": []
    }


@pytest.fixture(scope="function")
def client(current_user_mock):
    """Test client —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)

    def override_get_db():
        try:
            db = TestingSessionLocal()
            yield db
        finally:
            db.close()

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    async def override_get_current_user():
        print(f"‚úÖ MOCK get_current_user called, returning user: {current_user_mock.id}")
        return current_user_mock

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    test_app = create_test_app()

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    test_app.dependency_overrides[get_db] = override_get_db
    test_app.dependency_overrides[get_current_user] = override_get_current_user

    with TestClient(test_app) as test_client:
        yield test_client

    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    test_app.dependency_overrides.clear()
    Base.metadata.drop_all(bind=engine)


@pytest.fixture
def db_session():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ë–î"""
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
@pytest.fixture
def restore_original_auth_functions():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        import src.security.auth as auth_module
        if hasattr(auth_module, 'original_get_password_hash'):
            auth_module.get_password_hash = auth_module.original_get_password_hash
        if hasattr(auth_module, 'original_verify_password'):
            auth_module.verify_password = auth_module.original_verify_password
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")