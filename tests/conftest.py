# src/tests/conftest.py
import os
import sys
import asyncio
from datetime import datetime, timedelta

import pytest
import uuid
from typing import AsyncGenerator

from fastapi.testclient import TestClient
from fastapi import FastAPI
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.pool import StaticPool

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

print(f"üîß Project root: {project_root}")

# –ú–æ–∫–∞–µ–º LiveKit –î–û –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import sys
from unittest.mock import MagicMock

# –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è livekit
mock_livekit = MagicMock()
mock_livekit.api.AccessToken = MagicMock
mock_livekit.api.access_token.VideoGrants = MagicMock

sys.modules['livekit'] = mock_livekit
sys.modules['livekit.api'] = mock_livekit.api
sys.modules['livekit.api.access_token'] = mock_livekit.api.access_token

try:
    from main import app as main_app
    from src.database.postgres import get_db
    from src.database.models.base import Base
    from src.endpoints.auth import auth_router
    from src.endpoints.payments import payments_router
    from src.endpoints.projects import projects_router

    # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢–´ –ù–û–í–´–• –†–û–£–¢–ï–†–û–í (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    try:
        from src.endpoints.comments import comments_router

        COMMENTS_AVAILABLE = True
        print("‚úÖ Comments router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        COMMENTS_AVAILABLE = False
        print("‚ö†Ô∏è Comments router –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        from src.endpoints.likes import likes_router

        LIKES_AVAILABLE = True
        print("‚úÖ Likes router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        LIKES_AVAILABLE = False
        print("‚ö†Ô∏è Likes router –Ω–µ –Ω–∞–π–¥–µ–Ω")

    from src.security.auth import get_current_user

    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise


# –ú–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
def mock_get_password_hash(password):
    """–ú–æ–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è - –æ–±—Ö–æ–¥–∏—Ç bcrypt –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    return f"mock_hash_{password}"


def mock_verify_password(plain_password, hashed_password):
    """–ú–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
    if hashed_password.startswith("mock_hash_"):
        expected_password = hashed_password.replace("mock_hash_", "")
        return plain_password == expected_password
    return False


# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–∫–∏ –∫ –º–æ–¥—É–ª—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
try:
    import src.security.auth as auth_module

    auth_module.get_password_hash = mock_get_password_hash
    auth_module.verify_password = mock_verify_password
    print("‚úÖ –ú–æ–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ auth –º–æ–¥—É–ª—é")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–∫–∏ –∫ auth –º–æ–¥—É–ª—é: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î (SQLite)
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

engine = create_async_engine(
    TEST_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
    echo=False  # –£–±—Ä–∞–ª–∏ echo –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
)

TestingAsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    test_app = FastAPI(
        title="Test Crowdfunding Platform API",
        description="–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        version="1.0.0",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    test_app.include_router(auth_router)
    test_app.include_router(payments_router)
    test_app.include_router(projects_router)

    # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –†–û–£–¢–ï–†–´ (–µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if COMMENTS_AVAILABLE:
        test_app.include_router(comments_router)
        print("‚úÖ Comments router –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

    if LIKES_AVAILABLE:
        test_app.include_router(likes_router)
        print("‚úÖ Likes router –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

    # Health check
    @test_app.get("/health")
    async def health_check():
        return {"status": "healthy", "environment": "test"}

    return test_app


@pytest.fixture
def current_user_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –º–æ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    class MockUser:
        def __init__(self):
            self.id = 1
            self.email = "test@example.com"
            self.username = "testuser"
            self.is_active = True
            self.phone = "+79991234567"

    return MockUser()


@pytest.fixture
def valid_register_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    unique_id = uuid.uuid4().hex[:8]
    return {
        "email": f"test_{unique_id}@example.com",
        "phone": f"+7999{unique_id[:7]}",
        "username": f"user_{unique_id}",
        "password": "TestPass123!",
        "secret_code": "1234"
    }


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–µ—Ç event loop –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="function")
async def db_session() -> AsyncGenerator[AsyncSession, None]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ë–î"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async with TestingAsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


@pytest.fixture(scope="function")
async def client() -> TestClient:
    """Test client —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async def override_get_db() -> AsyncGenerator[AsyncSession, None]:
        async with TestingAsyncSessionLocal() as session:
            try:
                yield session
            finally:
                await session.close()

    async def override_get_current_user():
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        mock_user = type('MockUser', (), {
            'id': 1,
            'email': 'test@example.com',
            'username': 'testuser',
            'is_active': True,
            'phone': '+79991234567'
        })()
        return mock_user

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    test_app = create_test_app()

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    test_app.dependency_overrides[get_db] = override_get_db
    test_app.dependency_overrides[get_current_user] = override_get_current_user

    with TestClient(test_app) as test_client:
        yield test_client

    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    test_app.dependency_overrides.clear()

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –¢–ï–°–¢–û–í

@pytest.fixture
async def test_user(db_session: AsyncSession):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    from src.database.models import User
    import uuid

    unique_id = uuid.uuid4().hex[:8]

    user = User(
        email=f"repo_test_{unique_id}@example.com",
        phone=f"+7999{unique_id}",
        username=f"repotestuser_{unique_id}",
        secret_code="5678",
        hashed_password="mock_hash_TestPass123!",
        is_active=True
    )

    db_session.add(user)
    await db_session.commit()
    await db_session.refresh(user)

    return user


@pytest.fixture
async def test_project(db_session: AsyncSession, test_user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    from src.database.models.models_content import Project, ProjectStatus

    project = Project(
        title="Test Project",
        description="Test Description",
        short_description="Short test description",
        goal_amount=1000.0,
        current_amount=0.0,
        category="Technology",
        tags=["test", "technology"],
        status=ProjectStatus.DRAFT,
        creator_id=test_user.id,

    )

    db_session.add(project)
    await db_session.commit()
    await db_session.refresh(project)

    return project


@pytest.fixture
async def test_post(db_session: AsyncSession, test_user, test_project):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    from src.database.models.models_content import Post, PostType

    post = Post(
        content="Test Content",
        author_id=test_user.id,
        project_id=test_project.id,
        post_type=PostType.UPDATE,

    )

    db_session.add(post)
    await db_session.commit()
    await db_session.refresh(post)

    return post


@pytest.fixture
async def test_webinar(db_session: AsyncSession, test_user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–±–∏–Ω–∞—Ä"""
    from src.database import models

    webinar = models.Webinar(
        title="Test Webinar",
        description="Test Description",
        scheduled_at=datetime.now() + timedelta(days=1),
        duration=60,
        max_participants=100,
        creator_id=test_user.id,
        status="scheduled"
        # is_public –Ω–µ –Ω—É–∂–Ω–æ - –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
    )

    db_session.add(webinar)
    await db_session.commit()
    await db_session.refresh(webinar)

    return webinar


@pytest.fixture
async def test_started_webinar(db_session: AsyncSession, test_user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–±–∏–Ω–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–∞—á–∞–ª—Å—è"""
    from src.database import models

    webinar = models.Webinar(
        title="Started Webinar",
        description="Test Description",
        scheduled_at=datetime.now() - timedelta(minutes=10),  # –Ω–∞—á–∞–ª—Å—è 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        duration=60,
        max_participants=100,
        creator_id=test_user.id,
        status="scheduled"
    )

    db_session.add(webinar)
    await db_session.commit()
    await db_session.refresh(webinar)

    return webinar


@pytest.fixture
async def test_webinar_registration(db_session: AsyncSession, test_webinar, test_user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"""
    from src.database import models

    registration = models.WebinarRegistration(
        webinar_id=test_webinar.id,
        user_id=test_user.id
    )

    db_session.add(registration)
    await db_session.commit()
    await db_session.refresh(registration)

    return registration

@pytest.fixture
def authenticated_headers():
    """‚úÖ –§–ò–ö–°–¢–£–†–ê –î–õ–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–• –ó–ê–ü–†–û–°–û–í"""
    return {
        "Content-Type": "application/json",
    }


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pytest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    config.option.asyncio_mode = "auto"


def pytest_sessionfinish(session, exitstatus):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")