# src/tests/conftest.py
import os
import sys
import asyncio
import pytest
import uuid
from typing import AsyncGenerator

from fastapi.testclient import TestClient
from fastapi import FastAPI
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.pool import StaticPool

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

print(f"üîß Project root: {project_root}")

# –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
try:
    from main import app as main_app
    from src.database.postgres import get_db
    from src.database.models.base import Base
    from src.endpoints.auth import auth_router
    from src.endpoints.payments import payments_router
    from src.endpoints.projects import projects_router
    from src.security.auth import get_current_user

    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise


# –ú–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
def mock_get_password_hash(password):
    """–ú–æ–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è - –æ–±—Ö–æ–¥–∏—Ç bcrypt –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    print(f"‚úÖ MOCK get_password_hash called with: '{password}' (length: {len(password)})")
    return f"mock_hash_{password}"


def mock_verify_password(plain_password, hashed_password):
    """–ú–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
    print(f"‚úÖ MOCK verify_password called with: '{plain_password}' vs '{hashed_password}'")
    if hashed_password.startswith("mock_hash_"):
        expected_password = hashed_password.replace("mock_hash_", "")
        return plain_password == expected_password
    return False


# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–∫–∏ –∫ –º–æ–¥—É–ª—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
try:
    import src.security.auth as auth_module
    auth_module.get_password_hash = mock_get_password_hash
    auth_module.verify_password = mock_verify_password
    print("‚úÖ –ú–æ–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ auth –º–æ–¥—É–ª—é")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–∫–∏ –∫ auth –º–æ–¥—É–ª—é: {e}")


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î (SQLite)
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

engine = create_async_engine(
    TEST_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
    echo=True  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
)

TestingAsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)


# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    test_app = FastAPI(
        title="Test Crowdfunding Platform API",
        description="–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        version="1.0.0",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    test_app.include_router(auth_router)
    test_app.include_router(payments_router)
    test_app.include_router(projects_router)

    # Health check
    @test_app.get("/health")
    async def health_check():
        return {"status": "healthy", "environment": "test"}

    return test_app


@pytest.fixture
def current_user_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –º–æ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    class MockUser:
        def __init__(self):
            self.id = 1
            self.email = "test@example.com"
            self.username = "testuser"
            self.is_active = True
    return MockUser()


@pytest.fixture
def valid_register_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    unique_id = uuid.uuid4().hex[:8]
    return {
        "email": f"test_{unique_id}@example.com",
        "phone": f"+7999{unique_id[:7]}",
        "username": f"user_{unique_id}",
        "password": "TestPass123!",
        "secret_code": "1234"
    }


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–µ—Ç event loop –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="function")
async def client(current_user_mock) -> TestClient:
    """Test client —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async def override_get_db() -> AsyncGenerator[AsyncSession, None]:
        async with TestingAsyncSessionLocal() as session:
            try:
                yield session
            finally:
                await session.close()

    async def override_get_current_user():
        return current_user_mock

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    test_app = create_test_app()

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    test_app.dependency_overrides[get_db] = override_get_db
    test_app.dependency_overrides[get_current_user] = override_get_current_user

    with TestClient(test_app) as test_client:
        yield test_client

    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ç–∞–±–ª–∏—Ü—ã
    test_app.dependency_overrides.clear()
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


@pytest.fixture(scope="function")
async def db_session() -> AsyncGenerator[AsyncSession, None]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ë–î"""
    async with TestingAsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pytest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    config.option.asyncio_mode = "auto"