# tests/tests_auth/test_auth_endpoints.py
import pytest
from unittest.mock import patch
from passlib.context import CryptContext
from fastapi import status


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ bcrypt
@pytest.fixture(autouse=True)
def mock_bcrypt():
    test_pwd_context = CryptContext(schemes=["sha256_crypt"], deprecated="auto")
    with patch('src.security.auth.pwd_context', test_pwd_context):
        yield


class TestAuthEndpoints:
    """–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""

    def test_register_success(self, client, valid_register_data):
        """–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        print(f"\nüîç Testing registration with:")
        print(f"   Email: {valid_register_data['email']}")
        print(f"   Password: '{valid_register_data['password']}'")
        print(f"   Password length: {len(valid_register_data['password'])} chars")

        response = client.post("/auth/register", json=valid_register_data)

        print(f"üì• Status: {response.status_code}")
        print(f"üì• Response: {response.text}")

        assert response.status_code == status.HTTP_201_CREATED
        data = response.json()
        assert "user_id" in data
        assert "message" in data

    def test_register_duplicate_email(self, client, valid_register_data):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º email"""
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        response1 = client.post("/auth/register", json=valid_register_data)
        assert response1.status_code == status.HTTP_201_CREATED

        # –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ email
        duplicate_data = valid_register_data.copy()
        duplicate_data["phone"] = "+79990000000"  # –ú–µ–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω

        response2 = client.post("/auth/register", json=duplicate_data)

        print(f"üì• Duplicate email status: {response2.status_code}")

        assert response2.status_code == status.HTTP_400_BAD_REQUEST
        error_detail = response2.json()["detail"].lower()
        assert any(word in error_detail for word in ["email", "–ø–æ—á—Ç–∞", "already"])

    def test_register_duplicate_phone(self, client, valid_register_data):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        response1 = client.post("/auth/register", json=valid_register_data)
        assert response1.status_code == status.HTTP_201_CREATED

        # –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        duplicate_data = valid_register_data.copy()
        duplicate_data["email"] = "new_email@example.com"  # –ú–µ–Ω—è–µ–º email

        response2 = client.post("/auth/register", json=duplicate_data)

        print(f"üì• Duplicate phone status: {response2.status_code}")

        assert response2.status_code == status.HTTP_400_BAD_REQUEST
        error_detail = response2.json()["detail"].lower()
        assert any(word in error_detail for word in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "phone", "already"])

    def test_register_invalid_data(self, client):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        invalid_data = {
            "email": "invalid-email",
            "phone": "123",
            "username": "ab",
            "is_active": True,
            "password": "short",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
            "secret_code": "123"  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥
        }

        response = client.post("/auth/register", json=invalid_data)

        print(f"üì• Invalid data status: {response.status_code}")

        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 422 (Validation Error) –∏–ª–∏ 400
        assert response.status_code in [status.HTTP_422_UNPROCESSABLE_ENTITY, status.HTTP_400_BAD_REQUEST]

    def test_login_success_structure(self, client, valid_register_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ"""
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        register_response = client.post("/auth/register", json=valid_register_data)
        assert register_response.status_code == status.HTTP_201_CREATED

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ username –∏ secret_code –∫–∞–∫ password)
        login_data = {
            "username": valid_register_data["email"],
            "password": valid_register_data["secret_code"]  # –í –ª–æ–≥–∏–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è secret_code –∫–∞–∫ –ø–∞—Ä–æ–ª—å
        }

        response = client.post("/auth/login", data=login_data)

        print(f"üì• Login status: {response.status_code}")
        print(f"üì• Login response: {response.text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            assert "requires_2fa" in data
            assert data["requires_2fa"] is True
            assert "message" in data
            assert "user_id" in data
        else:
            # –ï—Å–ª–∏ –Ω–µ 200, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
            assert response.status_code in [401, 400, 422]
            error_data = response.json()
            assert "detail" in error_data

    def test_login_invalid_credentials(self, client, valid_register_data):
        """–õ–æ–≥–∏–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        register_response = client.post("/auth/register", json=valid_register_data)
        assert register_response.status_code == status.HTTP_201_CREATED

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º secret_code
        login_data = {
            "username": valid_register_data["email"],
            "password": "wrong_code"  # –ù–µ–≤–µ—Ä–Ω—ã–π secret_code
        }

        response = client.post("/auth/login", data=login_data)

        print(f"üì• Invalid login status: {response.status_code}")

        assert response.status_code == status.HTTP_401_UNAUTHORIZED
        error_data = response.json()
        assert "detail" in error_data


class TestDatabaseIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î"""

    def test_database_connection(self, db_session):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        from sqlalchemy import text
        result = db_session.execute(text("SELECT 1"))
        assert result.scalar() == 1

# pytest tests/tests_auth/test_auth_endpoints.py --html=report.html