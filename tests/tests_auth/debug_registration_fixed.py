# tests/tests_auth/debug_registration_fixed.py
import pytest
import asyncio
from unittest.mock import patch, MagicMock
from sqlalchemy import select


@pytest.mark.asyncio
async def test_debug_webinar_registration(client, db_session, test_user, test_webinar):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.id} - {test_user.email}")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–±–∏–Ω–∞—Ä: {test_webinar.id} - {test_webinar.title}")
    print(f"üìä –°—Ç–∞—Ç—É—Å –≤–µ–±–∏–Ω–∞—Ä–∞: {test_webinar.status}")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {test_webinar.max_participants}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–ª–µ –≤–º–µ—Å—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    from sqlalchemy import text
    result = await db_session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='users'"))
    users_table = result.scalar_one_or_none()
    print(f"üìã –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {users_table is not None}")

    result = await db_session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='webinars'"))
    webinars_table = result.scalar_one_or_none()
    print(f"üìã –¢–∞–±–ª–∏—Ü–∞ webinars —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {webinars_table is not None}")

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –î–õ–Ø –ú–û–ö–ê - –ø–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç –≤ webinar_service
    with patch('src.services.webinar_service.notification_service') as mock_notif_service:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è notification_service
        mock_notif_instance = MagicMock()
        mock_notif_instance.create_notification.return_value = MagicMock()
        mock_notif_service.return_value = mock_notif_instance

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä {test_webinar.id}...")
        response = client.post(f"/webinars/{test_webinar.id}/register")

        print(f"üìä Response status: {response.status_code}")
        print(f"üìã Response body: {response.text}")

        if response.status_code == 400:
            error_detail = response.json().get('detail', 'Unknown error')
            print(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            await db_session.refresh(test_webinar)
            print(f"üìä –í–µ–±–∏–Ω–∞—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ - —Å—Ç–∞—Ç—É—Å: {test_webinar.status}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from src.database.models import WebinarRegistration
            existing_reg = await db_session.scalar(
                select(WebinarRegistration).where(
                    WebinarRegistration.webinar_id == test_webinar.id,
                    WebinarRegistration.user_id == test_user.id
                )
            )
            print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {existing_reg}")

        elif response.status_code == 200:
            print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å
            from src.database.models import WebinarRegistration
            registration = await db_session.scalar(
                select(WebinarRegistration).where(
                    WebinarRegistration.webinar_id == test_webinar.id,
                    WebinarRegistration.user_id == test_user.id
                )
            )
            print(f"üìä –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
            assert mock_notif_instance.create_notification.called
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# pytest tests/tests_auth/debug_registration_fixed.py --html=report.html --self-contained-html