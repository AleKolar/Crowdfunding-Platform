# tests/test_auth_login.py
import pytest
from unittest.mock import patch
from fastapi.testclient import TestClient


@pytest.mark.asyncio
def test_user_login_success(client: TestClient, db_session, test_user):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...")

    login_data = {
        "email": test_user.email,
        "secret_code": "5678"
    }

    # –ú–æ–∫–∞–µ–º –í–ù–£–¢–†–ò AuthService, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
    with patch('src.services.auth_service.authenticate_user') as mock_auth, \
            patch('src.services.auth_service.generate_and_send_sms_code') as mock_sms:

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_auth.return_value = test_user
        mock_sms.return_value = None

        response = client.post("/auth/login", json=login_data)

        print(f"üìä Status: {response.status_code}")
        print(f"üìã Response: {response.text}")

        if response.status_code == 200:
            print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!")
            data = response.json()
            assert data["requires_2fa"] == True
            assert "user_id" in data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –º–æ–∫–æ–≤
            print(f"üîß Mock auth called: {mock_auth.called}")
            print(f"üîß Mock SMS called: {mock_sms.called}")

            # –≠—Ç–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—É—Ç—å
            # –ù–æ –≥–ª–∞–≤–Ω–æ–µ - —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code}")


@pytest.mark.asyncio
def test_user_login_success_with_service_mock(client: TestClient, db_session, test_user):
    """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —Å –º–æ–∫–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –º–æ–∫...")

    login_data = {
        "email": test_user.email,
        "secret_code": "5678"
    }

    # –ú–æ–∫–∞–µ–º –≤–µ—Å—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –º–µ—Ç–æ–¥
    with patch('src.services.auth_service.AuthService.login_user') as mock_service:
        mock_service.return_value = {
            "requires_2fa": True,
            "message": "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω",
            "user_id": test_user.id
        }

        response = client.post("/auth/login", json=login_data)

        print(f"üìä Status: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –º–æ–∫!")
            data = response.json()
            assert data["requires_2fa"] == True
            assert data["user_id"] == test_user.id
            assert mock_service.called
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")


def test_user_login_invalid_credentials(client: TestClient, test_user):
    """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    login_data = {
        "email": "nonexistent@example.com",
        "secret_code": "9999"
    }

    # –ú–æ–∫–∞–µ–º –≤–Ω—É—Ç—Ä–∏ AuthService
    with patch('src.services.auth_service.authenticate_user') as mock_auth:
        mock_auth.return_value = None

        response = client.post("/auth/login", json=login_data)

        print(f"üìä Status: {response.status_code}")

        if response.status_code in [401, 400]:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ credentials")
        else:
            print(f"‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å {response.status_code} (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")


@pytest.mark.asyncio
async def test_user_login_direct_auth_service(client: TestClient, db_session, test_user):
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ AuthService"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ AuthService...")

    from src.services.auth_service import AuthService

    from src.schemas.auth import UserLogin

    login_data = UserLogin(
        email=test_user.email,
        secret_code="5678"
    )

    # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ AuthService
    with patch('src.services.auth_service.authenticate_user') as mock_auth, \
            patch('src.services.auth_service.generate_and_send_sms_code') as mock_sms:
        mock_auth.return_value = test_user
        mock_sms.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
        result = await AuthService.login_user(login_data, db_session)

        print(f"üìã Result: {result}")

        assert result["requires_2fa"] == True
        assert result["user_id"] == test_user.id
        print("‚úÖ AuthService.login_user —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


@pytest.mark.asyncio
async def test_auth_service_internals(db_session, test_user):
    """–¢–µ—Å—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π AuthService"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π AuthService...")

    from src.services.auth_service import AuthService
    from src.schemas.auth import UserLogin

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    login_data = UserLogin(
        email=test_user.email,
        secret_code="5678"
    )

    try:
        result = await AuthService.login_user(login_data, db_session)
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print("‚úÖ AuthService —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ AuthService: {e}")

# pytest tests/tests_auth/test_auth_login.py --html=report.html