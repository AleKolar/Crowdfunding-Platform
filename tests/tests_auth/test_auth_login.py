# tests/tests_auth/test_auth_login.py
# tests/tests_auth/test_auth_login.py
import pytest
from unittest.mock import patch, AsyncMock
from fastapi.testclient import TestClient
from fastapi import HTTPException, status


@pytest.mark.asyncio
async def test_user_login_success(client: TestClient, db_session, test_user):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ - –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–¢–ê–Æ–©–ò–ô –¢–ï–°–¢"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞...")

    login_data = {
        "email": test_user.email,
        "secret_code": "5678"
    }

    with patch('src.services.auth_service.authenticate_user') as mock_auth, \
            patch('src.security.auth.generate_and_send_verification_codes') as mock_verification:

        mock_auth.return_value = test_user
        mock_verification.return_value = AsyncMock(return_value={
            "sms_code": "123456",
            "email_code": "123456",
            "sms_sent": True,
            "email_sent": True
        })

        response = client.post("/auth/login", json=login_data)

        print(f"üìä Status: {response.status_code}")
        print(f"üìã Response: {response.json()}")

        if response.status_code == 200:
            print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!")
            data = response.json()
            assert data["requires_2fa"] == True
            assert data["user_id"] == test_user.id
            assert "message" in data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∫–∏ –≤—ã–∑–≤–∞–Ω—ã
            print(f"üîß Mock auth called: {mock_auth.called}")
            print(f"üîß Mock verification codes called: {mock_verification.called}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code}")


def test_user_login_invalid_credentials(client: TestClient, test_user):
    """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    login_data = {
        "email": "nonexistent@example.com",
        "secret_code": "9999"
    }

    # –ú–æ–∫–∞–µ–º authenticate_user —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å None (–Ω–µ–≤–µ—Ä–Ω—ã–µ credentials)
    with patch('src.services.auth_service.authenticate_user') as mock_auth:
        mock_auth.return_value = None

        response = client.post("/auth/login", json=login_data)

        print(f"üìä Status: {response.status_code}")

        if response.status_code in [401, 400]:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ credentials")
        else:
            print(f"‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å {response.status_code}")


@pytest.mark.asyncio
async def test_user_login_direct_auth_service(client: TestClient, db_session, test_user):
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ AuthService"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ AuthService...")

    from src.services.auth_service import AuthService
    from src.schemas.auth import UserLogin

    login_data = UserLogin(
        email=test_user.email,
        secret_code="5678"
    )

    with patch('src.services.auth_service.authenticate_user') as mock_auth, \
            patch('src.security.auth.generate_and_send_verification_codes') as mock_verification:
        mock_auth.return_value = test_user
        mock_verification.return_value = AsyncMock(return_value={
            "sms_code": "123456",
            "email_code": "123456",
            "sms_sent": True,
            "email_sent": True
        })

        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
        result = await AuthService.login_user(login_data, db_session)

        print(f"üìã Result: {result}")

        assert result["requires_2fa"] == True
        assert result["user_id"] == test_user.id
        assert "message" in result
        print("‚úÖ AuthService.login_user —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

# pytest tests/tests_auth/test_auth_login.py --html=report.html