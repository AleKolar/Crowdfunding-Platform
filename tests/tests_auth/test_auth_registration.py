# tests/test_auth_registration.py
import pytest
from unittest.mock import patch, MagicMock
from fastapi.testclient import TestClient


def test_user_registration_success(client: TestClient, valid_register_data):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É welcome email
    with patch('src.tasks.tasks.send_welcome_email.delay') as mock_email:
        response = client.post("/auth/register", json=valid_register_data)

        print(f"üìä Status: {response.status_code}")
        print(f"üìã Response: {response.text}")

        if response.status_code == 201:
            print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            data = response.json()
            assert "user_id" in data
            assert data["email"] == valid_register_data["email"]
            assert mock_email.called
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            if response.status_code == 422:
                print("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            elif response.status_code == 400:
                error_detail = response.json().get('detail', 'Unknown error')
                print(f"–û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: {error_detail}")


def test_user_registration_duplicate_email(client: TestClient, valid_register_data):
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è email"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è email...")

    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with patch('src.tasks.tasks.send_welcome_email.delay'):
        response1 = client.post("/auth/register", json=valid_register_data)

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–º –∂–µ email
        duplicate_data = valid_register_data.copy()
        duplicate_data["phone"] = "+79001112233"  # –ú–µ–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        duplicate_data["username"] = "different_user"  # –ú–µ–Ω—è–µ–º username

        response2 = client.post("/auth/register", json=duplicate_data)

        print(f"üìä –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {response1.status_code}")
        print(f"üìä –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {response2.status_code}")

        if response2.status_code == 400:
            error_detail = response2.json().get('detail', '')
            if "email" in error_detail.lower():
                print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è email")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_detail}")
        else:
            print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 400 –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è email")


def test_user_registration_validation(client: TestClient):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

    invalid_cases = [
        {
            "data": {
                "email": "invalid-email",
                "phone": "+79001234567",
                "username": "testuser",
                "secret_code": "1234",
                "password": "short"
            },
            "expected_error": "email"
        },
        {
            "data": {
                "email": "test@example.com",
                "phone": "invalid-phone",
                "username": "testuser",
                "secret_code": "1234",
                "password": "validpassword123"
            },
            "expected_error": "phone"
        }
    ]

    for i, case in enumerate(invalid_cases):
        print(f"  –¢–µ—Å—Ç –∫–µ–π—Å {i + 1}: {case['expected_error']}")
        response = client.post("/auth/register", json=case['data'])

        if response.status_code == 422:
            print("    ‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")

# pytest tests/tests_auth/test_auth_registration.py --html=report.html