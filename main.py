# main.py
import os
import time
import logging
from contextlib import asynccontextmanager
from typing import cast, Any

from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.staticfiles import StaticFiles

from fastapi.responses import HTMLResponse
from pydantic import ValidationError
from slowapi import Limiter
from slowapi.errors import RateLimitExceeded
from slowapi.util import get_remote_address

from starlette import status
from starlette.responses import JSONResponse

from src.core.templates import templates
from src.database.postgres import create_tables, engine
from src.database.redis_client import redis_manager
from src.endpoints import webinars
from src.endpoints.auth import auth_router
from src.endpoints.comments import comments_router
from src.endpoints.likes import likes_router
from src.endpoints.payments import payments_router
from src.endpoints.projects import projects_router
from src.endpoints.websocket import projects_web_router

logger = logging.getLogger(__name__)

limiter = Limiter(key_func=get_remote_address)

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Swagger (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if os.getenv("ENVIRONMENT") == "development" and os.path.exists("./openapi.json"):
    os.remove("./openapi.json")

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup events
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
        await redis_manager.init_redis()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        if os.getenv("ENVIRONMENT") == "production":
            raise

    try:
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if os.getenv("ENVIRONMENT") == "development":
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")
            await create_tables() # ‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ !!!
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (development mode)")

        print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    yield

    # Shutdown events
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await redis_manager.close_redis()
        print("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Redis: {e}")

    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        await engine.dispose()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ë–î: {e}")

    print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Crowdfunding Platform API",
    description="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—Ä–∞—É–¥—Ñ–∞–Ω–¥–∏–Ω–≥–∞ —Å –≤–µ–±–∏–Ω–∞—Ä–∞–º–∏ –∏ –¥–æ–Ω–∞—Ç–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan,
    swagger_ui_parameters={
        "persistAuthorization": True,
        "tryItOutEnabled": True,
        "displayRequestDuration": True,
        "defaultModelsExpandDepth": -1,  # –°–∫—Ä—ã—Ç—å —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "filter": True,  # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    },
    redoc_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º ReDoc, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Swagger
)

# Middleware –∏ CORS
app.add_middleware(
    cast(Any, CORSMiddleware),
    allow_origins=[
        "http://localhost:8000",      # ‚Üê localhost –Ω–∞ –ø–æ—Ä—Ç—É 8000
        "http://127.0.0.1:8000",      # ‚Üê 127.0.0.1 –Ω–∞ –ø–æ—Ä—Ç—É 8000
        "http://localhost:8001",      # ‚Üê localhost –Ω–∞ –ø–æ—Ä—Ç—É 8001
        "http://127.0.0.1:8001",      # ‚Üê 127.0.0.1 –Ω–∞ –ø–æ—Ä—Ç—É 8001
    ] if os.getenv("ENVIRONMENT") == "production" else ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["Authorization", "Content-Type"],
)

app.add_middleware(
    cast(Any, TrustedHostMiddleware),
    allowed_hosts=[
        "localhost",
        "127.0.0.1",
        "yourdomain.com",
        "api.yourdomain.com"
    ] if os.getenv("ENVIRONMENT") == "production" else ["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_slow_requests(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (> 1 —Å–µ–∫)
    if process_time > 1.0:
        logger.warning(
            f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url} "
            f"- {process_time:.3f}s"
        )

    return response


@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)

    response.headers["X-Content-Type-Options"] = "nosniff"

    return response

# ========== EXCEPTION HANDLERS ==========

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}", exc_info=True)

    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "detail": "Internal Server Error",
            "error_type": type(exc).__name__
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {exc}")

    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "detail": "Validation Error",
            "errors": exc.errors()
        }
    )


@app.exception_handler(ValidationError)
async def pydantic_validation_handler(request: Request, exc: ValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic"""
    logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic: {exc}")

    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "detail": "Data Validation Error",
            "errors": exc.errors()
        }
    )


@app.exception_handler(RateLimitExceeded)
async def rate_limit_handler(request: Request, exc: RateLimitExceeded):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return JSONResponse(
        status_code=status.HTTP_429_TOO_MANY_REQUESTS,
        content={"detail": "Too many requests"}
    )

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if request.url.path.startswith('/api/'):
        return JSONResponse(
            status_code=404,
            content={"detail": "Endpoint not found"}
        )
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML
    return templates.TemplateResponse("404.html", {"request": request}, status_code=404)

# ========== STATIC FILES & TEMPLATES ==========

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_DIR = os.path.join(BASE_DIR, "src", "static")

app.mount("/static", StaticFiles(directory="src/static"), name="static")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - HTML"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request):
    """–î–∞—à–±–æ—Ä–¥ - HTML"""
    return templates.TemplateResponse("dashboard.html", {"request": request})

@app.get("/register", response_class=HTMLResponse)
async def register_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - HTML"""
    return templates.TemplateResponse("auth/register.html", {"request": request})  # ‚Üê auth/register.html

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ - HTML"""
    return templates.TemplateResponse("auth/login.html", {"request": request})  # ‚Üê auth/login.html

@app.get("/verify-2fa", response_class=HTMLResponse)
async def verify_2fa_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA"""
    return templates.TemplateResponse("auth/verify_2fa.html", {"request": request})

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/projects-page", response_class=HTMLResponse)
async def projects_page(request: Request):
    return templates.TemplateResponse("projects.html", {"request": request})

@app.get("/webinars-page", response_class=HTMLResponse)
async def webinars_page(request: Request):
    return templates.TemplateResponse("webinars.html", {"request": request})

@app.get("/comments-page", response_class=HTMLResponse)
async def comments_page(request: Request):
    return templates.TemplateResponse("comments.html", {"request": request})


# ========== –ü–û–¢–û–ú API –≠–ù–î–ü–û–ò–ù–¢–´ ==========

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/api/health", tags=["System"])
async def health_check(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã - JSON"""
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "environment": os.getenv("ENVIRONMENT", "development"),
        "services": {}
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try:
        await redis_manager.redis_client.ping()
        health_status["services"]["redis"] = "healthy"
    except Exception as e:
        health_status["services"]["redis"] = f"unhealthy: {str(e)}"
        health_status["status"] = "degraded"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    try:
        async with engine.begin() as conn:
            await conn.execute("SELECT 1")
        health_status["services"]["postgresql"] = "healthy"
    except Exception as e:
        health_status["services"]["postgresql"] = f"unhealthy: {str(e)}"
        health_status["status"] = "unhealthy"

    return health_status

@app.get("/api/root", tags=["System"])
async def api_root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π API endpoint - JSON"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crowdfunding Platform API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/api/health",
        "environment": os.getenv("ENVIRONMENT", "development")
    }

# –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint —Å rate limiting
@app.get("/api/status", tags=["System"])
@limiter.limit("10/minute")
async def api_status(request: Request):
    """–°—Ç–∞—Ç—É—Å API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ - JSON"""
    return {
        "status": "operational",
        "users_online": await get_online_users_count(),
        "system_load": "normal"
    }

async def get_online_users_count():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis"""
    try:
        if not redis_manager.redis_client:
            return 0
        keys = await redis_manager.redis_client.keys("websocket:*")
        return len(keys)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

# ========== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–û–í ==========

app.include_router(auth_router)
app.include_router(payments_router)
app.include_router(projects_router)
app.include_router(projects_web_router)
app.include_router(comments_router)
app.include_router(likes_router)
app.include_router(webinars.webinar_router)

print("üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏:")
for route in app.routes:
    if hasattr(route, 'path'):
        methods = getattr(route, 'methods', ['?'])
        print(f"  {methods} {route.path}")



