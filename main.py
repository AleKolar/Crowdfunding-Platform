from contextlib import asynccontextmanager
from typing import cast, Any

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from slowapi import Limiter
from slowapi.util import get_remote_address
from slowapi.middleware import SlowAPIMiddleware
import os
import time

from src.database.postgres import create_tables, engine
from src.database.redis_client import redis_manager
from src.endpoints.auth import auth_router
from src.endpoints.payments import payments_router
from src.endpoints.projects import projects_router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–µ—Ä–∞ –¥–ª—è rate limiting
limiter = Limiter(key_func=get_remote_address)

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Swagger
if os.path.exists("./openapi.json"):
    os.remove("./openapi.json")

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup events
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
        await redis_manager.init_redis()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        if os.getenv("ENVIRONMENT") == "production":
            raise

    try:
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if os.getenv("ENVIRONMENT") == "development":
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")
            await create_tables() # ‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ !!!
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (development mode)")

        print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    yield

    # Shutdown events
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await redis_manager.close_redis()
        print("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Redis: {e}")

    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        await engine.dispose()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ë–î: {e}")

    print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Crowdfunding Platform API",
    description="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—Ä–∞—É–¥—Ñ–∞–Ω–¥–∏–Ω–≥–∞ —Å –≤–µ–±–∏–Ω–∞—Ä–∞–º–∏ –∏ –¥–æ–Ω–∞—Ç–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan,
    swagger_ui_parameters={
        "persistAuthorization": True,
        "tryItOutEnabled": True,
        "displayRequestDuration": True,
        "defaultModelsExpandDepth": -1,  # –°–∫—Ä—ã—Ç—å —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "filter": True,  # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    },
    redoc_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º ReDoc, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Swagger
)

app.add_middleware(
    cast(Any, CORSMiddleware),
    allow_origins=[
        "http://localhost:8000",      # ‚Üê localhost –Ω–∞ –ø–æ—Ä—Ç—É 8000
        "http://127.0.0.1:8000",      # ‚Üê 127.0.0.1 –Ω–∞ –ø–æ—Ä—Ç—É 8000
        "http://localhost:8001",      # ‚Üê localhost –Ω–∞ –ø–æ—Ä—Ç—É 8001
        "http://127.0.0.1:8001",      # ‚Üê 127.0.0.1 –Ω–∞ –ø–æ—Ä—Ç—É 8001
    ] if os.getenv("ENVIRONMENT") == "production" else ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["Authorization", "Content-Type"],
    # expose_headers=["*"], # –∫–∞–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ exposed to browser
    # max_age=600,          # –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ preflight requests (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
)

app.add_middleware(
    cast(Any, TrustedHostMiddleware),
    allowed_hosts=[
        "localhost",
        "127.0.0.1",
        "yourdomain.com",
        "api.yourdomain.com"
    ] if os.getenv("ENVIRONMENT") == "production" else ["*"],
)

# Middleware
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    """Middleware –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)

    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if process_time > 1.0:  # –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
        print(f"‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url} - {process_time:.3f}s")

    return response


@app.middleware("http")
async def add_cache_headers(request: Request, call_next):
    """Middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    response = await call_next(request)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    if request.url.path.startswith("/static/"):
        response.headers["Cache-Control"] = "public, max-age=3600"  # 1 —á–∞—Å

    return response


# Rate limiting middleware (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
if os.getenv("ENVIRONMENT") == "production":
    app.add_middleware(cast(Any, SlowAPIMiddleware))


# Health check endpoint
@app.get("/health", tags=["System"])
@limiter.limit("100/minute")
async def health_check(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "environment": os.getenv("ENVIRONMENT", "development"),
        "services": {}
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try:
        await redis_manager.redis_client.ping()
        health_status["services"]["redis"] = "healthy"
    except Exception as e:
        health_status["services"]["redis"] = f"unhealthy: {str(e)}"
        health_status["status"] = "degraded"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    try:
        async with engine.begin() as conn:
            await conn.execute("SELECT 1")
        health_status["services"]["postgresql"] = "healthy"
    except Exception as e:
        health_status["services"]["postgresql"] = f"unhealthy: {str(e)}"
        health_status["status"] = "unhealthy"

    return health_status


@app.get("/", tags=["System"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crowdfunding Platform API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health",
        "environment": os.getenv("ENVIRONMENT", "development")
    }


# –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint —Å rate limiting
@app.get("/api/status", tags=["System"])
@limiter.limit("10/minute")
async def api_status(request: Request):
    """–°—Ç–∞—Ç—É—Å API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        "status": "operational",
        "users_online": await get_online_users_count(),
        "system_load": "normal"
    }


async def get_online_users_count():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis"""
    try:
        # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö WebSocket —Å–µ—Å—Å–∏–π
        keys = await redis_manager.redis_client.keys("websocket:*")
        return len(keys)
    except:
        return 0

app.include_router(auth_router)
app.include_router(payments_router)

app.include_router(projects_router)

print("üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏:")
for route in app.routes:
    if hasattr(route, 'path'):
        methods = getattr(route, 'methods', ['?'])
        print(f"  {methods} {route.path}")



